<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魔法少女♐Huii</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-16T09:03:42.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Huii</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Database</title>
    <link href="http://yoursite.com/2018/08/16/Database/"/>
    <id>http://yoursite.com/2018/08/16/Database/</id>
    <published>2018-08-16T02:14:36.000Z</published>
    <updated>2018-08-16T09:03:42.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr></tbody></table><hr><p><span id="jump1">chapter1  基本概念</span></p><p>关系数据库，是创建在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。 关系模型由关系数据结构、关系操作集合、关系完整性约束三部分组成。 </p><p>数据：data，描述事物的符号记录；数据粒度：字段、记录、表；字段的复杂数据类型：结构、数组、集合。</p><p>数据库：DB，存贮介质，长期储存，有一定组织形式，可共享；数据模型：较小的冗余度，独立性，易扩展性，共享。</p><p>数据库管理系统：DBMS，介于用户与操作系统之间的数据管理软件系统。</p><p>数据库系统：DBS，由数据库、数据库管理系统、应用程序、数据库管理员、用户组成。</p><p>数据库管理员：DBA，数据库设计、规划、协调的人员，最高特权的用户。</p><p>实例：特定时刻存储在数据库中的信息的集合。</p><p>模式：数据库的总体设计。</p><p>数据模型：四要素：结构、联系、操作、约束。</p><p>数据定义语言：DDL，定义了数据库模式的实现细节。</p><p>数据操纵语言：DML，使得用户可以访问或操纵那些按照某种适当的数据模型组织起来的数据。过程化DML：要求用户指需要什么数据以及如何获得这些数据；声明式DML：只要求用户指定需要什么数据；</p><p>数据库设计：DBS规划，DB设计，DB建立，DB应用程序设计，DB运行、管理、维护，DB扩充、重构</p><p>实体-联系模型：E-R，使用一组称为实体的基本对象，以及这些对象间的联系。数据库中实体通过属性集合来描述。联系时几个实体之间的关联。</p><hr><p><span id="jump2">chapter2  关系数据库</span></p><p>关系：二维表，由关系名标识</p><p>元组：表中的一行，记录，n元组</p><p>属性：表中的一列，属性名标识，字段</p><p>域：属性的取值范围</p><p>码：能够唯一确定一个元组的最小属性集//最小，可以唯一区分。</p><p>超码：包含码的属性集，可以是我们在一个关系中唯一地标识一个元组</p><p>候选码：一个关系的每个码都称候选码</p><p>主码：定义表时指定一个候选码</p><p>外码：本关系的属性集，另一关系的码</p><p>全码：表中找不出码，所有属性组成</p><p>主属性：任一候选码中的属性</p><p>非主属性：不在任何一个候选码中</p><p>一个含有主码和外码依赖的数据库模式可以用模式图来表示。</p><p>关系代数：基于集合运算表示表的操作，过程化</p><p>关系演算：基于谓词逻辑表示表的操作，非过程化</p><p>SQL：商用语言，基于集合运算，非过程化与过程化的结合</p><hr><p><span id="jump3">chapter3  SQL</span></p><p>char, vachar, int, smallint, numeric, real, double precision, float</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create table department</span><br><span class="line">(dept_name varchar (20),</span><br><span class="line">building varchar (15),</span><br><span class="line">budget numeric (12, 2),</span><br><span class="line">primary key (dept_name));</span><br><span class="line"></span><br><span class="line">insert into instructor</span><br><span class="line">values (&apos;..&apos;,&apos;..&apos;,..);</span><br><span class="line"></span><br><span class="line">delete from ..</span><br><span class="line">drop table..</span><br><span class="line">alter table .. add/drop ..</span><br><span class="line">select .. from .. where .. order by ..</span><br></pre></td></tr></table></figure><p>primary key：主码，主码属性必须非空且唯一</p><p>foreign key (..) references</p><hr><p><span id="jump4">chapter4  中级SQL</span></p><p>连接：（1）外连接：①左外连接，只保留出现在左外连接运算之前的关系中的元组。②右外连接， 只保留出现在右外连接运算之后的关系中的元组。③全外连接，保留出现在两个关系中的元组。（2）内连接</p><hr><p><span id="jump5">chapter5  高级SQL</span></p><p>触发器：是一条语句，当对数据库作修改时，它自动被系统执行。要设置触发器机制，必须满足两个要求：指明什么条件下执行触发器。指明触发器执行时的动作。p><p>OLAP</p><hr><p>span id=”jump6”&gt;chapter6  形式化关系查询语言</p><p>关系代数基本运算：选择、投影、并、集合差、笛卡尔积、更名</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;t
      
    
    </summary>
    
    
      <category term="study" scheme="http://yoursite.com/tags/study/"/>
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Data Structures</title>
    <link href="http://yoursite.com/2018/08/13/Data-Structures/"/>
    <id>http://yoursite.com/2018/08/13/Data-Structures/</id>
    <published>2018-08-13T08:34:13.000Z</published>
    <updated>2018-08-16T02:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>introduction:</p><hr><table><thead><tr><th>目录</th></tr></thead><tbody><tr><td><a href="#jump1">chapter1  C++回顾</a></td></tr><tr><td><a href="#jump2">chapter2  程序性能分析</a></td></tr><tr><td><a href="#jump3">chapter3  渐近记法</a></td></tr><tr><td><a href="#jump4">chapter4  性能测量</a></td></tr><tr><td><a href="#jump5">chapter5  线性表——数组描述</a></td></tr><tr><td><a href="#jump6">chapter6  线性表——链式描述</a></td></tr><tr><td><a href="#jump7">chapter7  数组和矩阵</a></td></tr><tr><td><a href="#jump8">chapter8  栈</a></td></tr><tr><td><a href="#jump9">chapter9  队列</a></td></tr><tr><td><a href="#jump10">chapter10  跳表和散列</a></td></tr><tr><td><a href="#jump11">chapter11  二叉树和其他树</a></td></tr><tr><td><a href="#jump12">chapter12  优先级队列</a></td></tr><tr><td><a href="#jump14">chapter14  搜索树</a></td></tr><tr><td><a href="#jump15">chapter15  平衡搜索树</a></td></tr><tr><td><a href="#jump16">chapter16  图</a></td></tr><tr><td><a href="#jump17">chapter17  贪婪算法</a></td></tr><tr><td><a href="#jump18">chapter18  分而治之</a></td></tr><tr><td><a href="#jump19">chapter19  动态规划</a></td></tr></tbody></table><p>选择排序，及时终止的选择排序</p><p>冒泡排序，及时终止的冒泡排序</p><p>名次排序</p><p>原地重排</p><p>插入排序</p><p>箱子排序</p><p>基数排序</p><p>堆排序</p><p>归并排序</p><hr><p><span id="jump1">chapter1  C++回顾</span></p><p>递归函数f：自己调用自己。直接递归，f包含了调用f的语句。间接递归，f调用了g，g调用了h，..，又调用了f。</p><p>递归函数 = 基础部分 + 递归部分。</p><p>斐波那契数列：F0=0，F1=1，Fn=F(n-1)+F(n-2)。</p><p>标准模板库STL：</p><hr><p><span id="jump2">chapter2  程序性能分析</span></p><p>程序性能：运行这个程序所需要的内存和时间的多少。性能分析时采用分析方法，性能测量时采用实验方法。</p><p>空间复杂度：该程序的运行所需内存的大小。组成：指令空间，数据空间，环境栈空间。一个程序所需空间=固定部分+可变部分=c+Sp。集中计算Sp。</p><p>时间复杂度：编译时间，运行时间。主要关注运行时间。方法：（1）找出一个或多个关键操作，确定它们的执行时间（操作计数）。（2）确定程序总的步数。</p><p>操作计数：选择一种或多种关键操作（+×），确定每一种操作的执行次数。</p><p>步数：一个语法或语义上的程序片段，该片段执行时间独立于实例特征。</p><hr><p><span id="jump3">chapter3  渐近记法</span></p><p>大O记法：p(n)，q(n)两个非负函数，称p(n)渐近地大于q(n)，当且仅当lim q(n)/p(n)=0；称q(n)渐近地小于p(n)，当且仅当p(n)渐近地大于q(n)。称p(n)渐近地等于q(n)，当且仅当任何一个都不是渐近地大于另一个。</p><p>大O记法：f(n)=O(g(n))，当且仅当存在常数c&gt;0和n0，使得对于所有的n&gt;=n0，有f(n)&lt;=cg(n)。g(n)是f(n)的上界。</p><p>渐近记法Ω：f(n)=Ω(g(n))表示f(n)渐近大于或等于g(n)。f(n)=Ω(g(n))当且仅当存在常数c&gt;0和n0，使得对所有的n&gt;=n0，有f(n)&gt;=cg(n)。g(n)是f(n)的下界。</p><p>θ记法：f(n)=θ(g(n))，当且仅当存在常数c1&gt;0，c2&gt;0和n0，使得对于所有的n&gt;=n0，有c1g(n)&lt;=f(n)&lt;=c2g(n)。用来表示f的上限和下限都是一个函数的情况。</p><p>小o记法：f(n)=o(g(n))，当且仅当f(n)=Og(n)且f(n)≠Ω(g(n))</p><hr><p><span id="jump4">chapter4  性能测量</span></p><hr><p><span id="jump5">chapter5  线性表——数组描述</span></p><p>数据对象：一组实例或值（原子或复合）</p><p>数据结构：一个数据对象，同时这个对象的实例以及构成实例的元素都存在着联系，而且这些联系有相关的函数来规定。</p><p>线性表：linear list，有序表，每一个实例的形式为(e0,e1,..,en-1)，ei是元素，i是索引，n是长度或大小。</p><p>数组描述/公式化描述/顺序存储：</p><p>（1）位置映射：location(i)=i；从后往前：location(i)=arrayLength-i-1；环绕：location(i)=(location(0)+i)%arrayLength；</p><p>（2）变长一维数组：一个新长度的数组，把原数组的元素复制到新数组，最后改变原数组的值。</p><p>（3）arrayList：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">checkIndex(<span class="keyword">int</span> theIndex)</span><br><span class="line">    <span class="comment">//检查索引不越界</span></span><br><span class="line">    <span class="keyword">if</span>(theIndex&lt;<span class="number">0</span> || theIndex&gt;=listSize)</span><br><span class="line">        <span class="keyword">throw</span> illeagalIndex(..);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get(<span class="keyword">int</span> theIndex)</span><br><span class="line">    <span class="comment">//返回索引为theIndex的元素</span></span><br><span class="line">    checkIndex(theIndex);</span><br><span class="line"><span class="keyword">return</span> element[theIndex];</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">indexOf(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">    <span class="comment">//返回元素theElement第一次出现的索引</span></span><br><span class="line">    <span class="keyword">int</span> theIndex = (<span class="keyword">int</span>) (find(element, element+listSize, theElement) - element);</span><br><span class="line"><span class="keyword">if</span>(theIndex == listSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> theIndex;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">earse(<span class="keyword">int</span> theIndex)</span><br><span class="line">    <span class="comment">//删除索引为theIndex的元素</span></span><br><span class="line">    checkIndex(theIndex);</span><br><span class="line">copy(element+theIndex+<span class="number">1</span>, element+listSize, element+theIndex);</span><br><span class="line">elemnt[--listSize].~T();</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">insert(<span class="keyword">int</span> theIndex, <span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">    <span class="comment">//在索引theIndex处插入元素theElement</span></span><br><span class="line">    check(theIndex);</span><br><span class="line"><span class="keyword">if</span>(listSize == arrayLength)</span><br><span class="line">        changeLength1D(element, arrayLenghth, <span class="number">2</span>*arrayLength);</span><br><span class="line">arrayLength *= <span class="number">2</span>;</span><br><span class="line">copy_backward(element+theIndex, element+listSize, element+listSize+<span class="number">1</span>)；<span class="comment">//向右移动一个</span></span><br><span class="line">    element[theIndex] = theElement;</span><br><span class="line">listSize++;</span><br></pre></td></tr></table></figure><p>（4）迭代器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>* y=x; y!=x+<span class="number">3</span>; y++)&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*y&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）arrayList的迭代器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">iterator</span>;</span></span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> iterator(element);&#125;</span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> iterator(element+listSize);&#125;</span><br></pre></td></tr></table></figure><p>vector</p><p>多重表</p><hr><p><span id="jump6">chapter6 线性表——链式描述</span></p><p>单向链表：每个节点只有一个链</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">chainNode</span>&#123;</span></span><br><span class="line">T element;</span><br><span class="line">    chainNode&lt;T&gt; *next;</span><br><span class="line">    </span><br><span class="line">    chainNode() &#123;&#125;</span><br><span class="line">    chainNode(<span class="keyword">const</span> T&amp; element)&#123;<span class="keyword">this</span>-&gt;element = element;&#125;</span><br><span class="line">    chainNode(<span class="keyword">const</span> T&amp; element, chainNode&lt;T&gt;* next)</span><br><span class="line">    &#123;<span class="keyword">this</span>-&gt;element = element; <span class="keyword">this</span>-&gt;next = next;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">get(<span class="keyword">int</span> theIndex) <span class="keyword">const</span></span><br><span class="line">    <span class="comment">//返回索引为theIndex的元素</span></span><br><span class="line">    checkIndex(theIndex);</span><br><span class="line">chainNode&lt;T&gt;* currentNode = firstNode;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;theIndex; i++)&#123;</span><br><span class="line">    currentNode = currentNode-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> currentNode-&gt;element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">indexOf(<span class="keyword">const</span> T&amp; theElement) <span class="keyword">const</span></span><br><span class="line">    <span class="comment">//返回元素theElement首次出现时的索引</span></span><br><span class="line">    chainNode&lt;T&gt;* currentNode = firstNode;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(currentNode != <span class="literal">NULL</span> &amp;&amp; </span><br><span class="line">currentNode-&gt;element != theElement)&#123;</span><br><span class="line">    currentNode = currentNode-&gt;next;</span><br><span class="line">        index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(currentNode == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> index;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">erase(<span class="keyword">int</span> theIndex)</span><br><span class="line">    <span class="comment">//删除索引为theIndex的元素</span></span><br><span class="line">    checkIndex(theIndex);</span><br><span class="line">    chainNode&lt;T&gt;* deleteNode;</span><br><span class="line"><span class="keyword">if</span>(theIndex == <span class="number">0</span>)&#123;</span><br><span class="line">    deleteNode = firstNode;</span><br><span class="line">        firstNode = firstNode-&gt;next;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        chainNode&lt;T&gt;* p = firstNode;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;theIndex<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        deleteNode = p-&gt;next;</span><br><span class="line">        p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">listSize--;</span><br><span class="line"><span class="keyword">delete</span> deleteNode;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">insert(<span class="keyword">int</span> theIndex, <span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">    <span class="comment">//在索引为theIndex处插入元素theElement</span></span><br><span class="line">    checkIndex(theIndex);</span><br><span class="line"><span class="keyword">if</span>(theIndex == <span class="number">0</span>)&#123;</span><br><span class="line">    firstNode = <span class="keyword">new</span> chainNode&lt;T&gt;(theElement, firstNode);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        chainNode&lt;T&gt;* p = firstNode;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;theIndex<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="keyword">new</span> chainNode&lt;T&gt;(theElement, p-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line">listSize++;</span><br></pre></td></tr></table></figure><p>iterator</p><p>extendedChain：lastNode</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clear()</span><br><span class="line">    <span class="comment">//删除链表所有节点</span></span><br><span class="line">    <span class="keyword">while</span>(firstNode != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        chainNode&lt;T&gt;* nextNode = firstNode-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> firstNode;</span><br><span class="line">        firstNode = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">listSize = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">push_back(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">    <span class="comment">//在链表尾端插入元素theElement元素</span></span><br><span class="line">    chainNode&lt;T&gt;* newNode = <span class="keyword">new</span> chainNode&lt;T&gt;(theELment, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(firstNode == <span class="literal">NULL</span>)</span><br><span class="line">        firstNode = lastNode = newNode;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    lastNode-&gt;next = newNode;</span><br><span class="line">        lastNode = newNode;</span><br><span class="line">&#125;</span><br><span class="line">listSize++;</span><br></pre></td></tr></table></figure><p>循环链表：将单向链表的头结点和尾节点连接起来。使用头结点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">indexOf(<span class="keyword">const</span> T&amp; theElment) <span class="keyword">const</span></span><br><span class="line"><span class="comment">//返回元素theElement首次出现的索引</span></span><br><span class="line">    headerNode-&gt;element = theElement;</span><br><span class="line">chainNode&lt;T&gt;* currentNode = headerNode-&gt;next;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(currentNode-&gt;element != theElement)&#123;</span><br><span class="line">    currentNode = currentNode-&gt;next;</span><br><span class="line">        index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(currentNode == headerNode)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> index;</span><br></pre></td></tr></table></figure><p>双向链表：next指向右边节点，previous指向左边节点。</p><p>箱子排序</p><p>基数排序</p><p>凸包</p><p>并查集：（1）等价类，等价关系 当且仅当 自反，对称，传递。相互等价的元素的最大集合。（2）离线等价类，已知n和R，确定等价类，每个元素只能属于一个等价类。（3）在线等价类，初始n，每个元素都属于一个等价类，需要combine和find。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">classA = find(A);</span><br><span class="line">classB = find(B);</span><br><span class="line"><span class="keyword">if</span>(classA != classB)&#123;</span><br><span class="line">    unite(classA, classB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><span id="jump7">chapter7  数组和矩阵</span></p><p>行主映射：map(i1, i2) = i1u2+i2；u2是数组的列数；列主映射：map(i1, i2) = u1i2+i1；</p><p>矩阵：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span>=(<span class="keyword">const</span> matrix&lt;T&gt; m)&#123;</span><br><span class="line">    <span class="comment">//赋值 (*this) = m</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;m)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] element;</span><br><span class="line">        theRows = m.theRows;</span><br><span class="line">        theColumns = m.theColumns;</span><br><span class="line">        element = <span class="keyword">new</span> T [theRows*theColumns];</span><br><span class="line">        copy(m.element, m.element+theRows*theColumns, element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span>() (<span class="keyword">int</span> i, <span class="keyword">int</span> j) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="comment">//返回元素element(i,j)的引用</span></span><br><span class="line">    <span class="keyword">if</span>(...)</span><br><span class="line">        <span class="comment">//检测越界</span></span><br><span class="line">    <span class="keyword">return</span> element[(i<span class="number">-1</span>)*theColumns+j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span>+(<span class="keyword">const</span> matrix&lt;T&gt;&amp; m) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="comment">//返回矩阵w = (*this)+m</span></span><br><span class="line">    <span class="keyword">if</span>(..)</span><br><span class="line">        <span class="comment">//检测</span></span><br><span class="line">    matrix&lt;T&gt; w(theRows, theColunns);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;theRows*theColumns; i++)&#123;</span><br><span class="line">        w.element[i] = element[i]+m.element[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">operator* (const matrix&lt;T&gt;&amp; m) const&#123;</span><br><span class="line">    if(..)</span><br><span class="line">        //检测</span><br><span class="line">    matrix&lt;T&gt; w(theRows, m.theColumns);</span><br><span class="line">    int ct=0, cm=0, cw=0;</span><br><span class="line">    for(int i=1; i&lt;=theRows; i++)&#123;</span><br><span class="line">        //结果矩阵第i行</span><br><span class="line">        for(int j=1; j&lt;=m.theColumns; j++)&#123;</span><br><span class="line">            T sum = element[ct]*m.element[cm];</span><br><span class="line">            for(int k=2; k&lt;=theColumns; k++)&#123;</span><br><span class="line">                ct++;</span><br><span class="line">                cm += m.theColumns;</span><br><span class="line">                sum += element[ct]*m.element[cm];</span><br><span class="line">            &#125;</span><br><span class="line">            w.element[cw++] = sum;</span><br><span class="line">            ct -= theColumns-1;</span><br><span class="line">            cm = j;</span><br><span class="line">        &#125;</span><br><span class="line">        ct += theColumns;</span><br><span class="line">        cm = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对角矩阵：</p><p>三对角矩阵：i=j，i=j+1，i=j-1.</p><p>对称矩阵</p><p>稀疏矩阵：大多数元素是0，记录非0元素的行号和列号，</p><hr><p><span id="jump8">chapter8  栈</span></p><p>栈：一种特殊的线性表，其插入和删除操作都在表的同一端进行。这一端称为栈顶，另一端称为栈底。后进先出</p><p>数组描述</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">arrayStack</span> :</span> <span class="keyword">public</span> <span class="built_in">stack</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">arrayStack(<span class="keyword">int</span> initialCapacity = <span class="number">10</span>);</span><br><span class="line">~arrayStack() &#123;<span class="keyword">delete</span> [] <span class="built_in">stack</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> stackTop == <span class="number">-1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> stackTop+<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="function">T&amp; <span class="title">top</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stackTop == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">throw</span> stackEmpty();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">stack</span>[stackTop];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stackTop == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">throw</span> stackEmpty();</span><br><span class="line">        <span class="built_in">stack</span>[stackTop--].~T();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> stackTop;</span><br><span class="line">    <span class="keyword">int</span> arrayLength;</span><br><span class="line">    T *<span class="built_in">stack</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">arrayStack</span>&lt;T&gt;:</span>:arrayStack(<span class="keyword">int</span> initialCapacity)&#123;</span><br><span class="line"><span class="keyword">if</span>(initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">        ..</span><br><span class="line">    arrayLength = initialCapacity;</span><br><span class="line">    <span class="built_in">stack</span> = <span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    stackTop = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">arrayStack</span>&lt;T&gt;:</span>:push(<span class="keyword">const</span> T&amp; theElement)&#123;</span><br><span class="line">    <span class="keyword">if</span>(stackTop == arrayLength<span class="number">-1</span>)&#123;</span><br><span class="line">        changeLength1D(<span class="built_in">stack</span>, arrayLength, <span class="number">2</span>*arrayLength);</span><br><span class="line">        arrayLength *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>[++stackTop] = theElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表描述</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">linkedStack</span> :</span> <span class="keyword">public</span> <span class="built_in">stack</span>&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    linkedStack(<span class="keyword">int</span> initialCapacity = <span class="number">10</span>)</span><br><span class="line">        &#123;stackTop = <span class="literal">NULL</span>; stackSize = <span class="number">0</span>;&#125;</span><br><span class="line">    ~linkedStack();</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> stackSize == <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stackSize == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> ..</span><br><span class="line">            <span class="keyword">return</span> stackTop-&gt;element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>&#123;</span><br><span class="line">        stackTop = <span class="keyword">new</span> chainNode&lt;T&gt;(theElement, stackTop);</span><br><span class="line">            stackSize++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    chainNode&lt;T&gt;* stackTop;</span><br><span class="line">    <span class="keyword">int</span> stackSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">linkedStack</span>&lt;T&gt;:</span>:~linkedStack()&#123;</span><br><span class="line">    <span class="keyword">while</span>(stackTop != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        chainNode&lt;T&gt;* nextNode = stackTop-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> stackTop;</span><br><span class="line">        stackTop = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">linkedStack</span>&lt;T&gt;:</span>:pop()&#123;</span><br><span class="line"><span class="keyword">if</span>(stackSize == <span class="number">0</span>)</span><br><span class="line">        ..</span><br><span class="line">    chainNode&lt;T&gt;* nextNode = stackTop-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> stackTop;</span><br><span class="line">    stackTop = nextNode;</span><br><span class="line">    stackSize--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>括号匹配：对一个字符串的左右括号进行匹配。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMatchedPairs</span><span class="params">(<span class="built_in">string</span> expr)</span></span>&#123;</span><br><span class="line">    <span class="comment">//括号匹配</span></span><br><span class="line">    arrayStack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> length = (<span class="keyword">int</span>)expr.size();</span><br><span class="line">    <span class="comment">//扫描找左右括号</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(expr.at(i) == <span class="string">'('</span>)&#123;</span><br><span class="line">            s.push(i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(expr.at(i) == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;s.top();</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"no match"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><span id="jump9">chapter9  队列</span></p><p>队列：一个线性表，其插入和删除操作在表的不同端进行。插入元素的一端为队尾，删除元素的一端为队首。</p><p>数组描述：环形数组：location(i) = (location(队列首元素)+i)%arrayLength；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">arrayQueue</span>&lt;T&gt;:</span>:push(<span class="keyword">const</span> T&amp; theElement)&#123;</span><br><span class="line">    <span class="keyword">if</span>((theBack+<span class="number">1</span>)%arrayLength == theFront)&#123;</span><br><span class="line">        <span class="comment">//加倍长度</span></span><br><span class="line">    &#125;        </span><br><span class="line">    queueBack = (queueBack+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    <span class="built_in">queue</span>[queueBack] = theElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加倍长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">T* newQueue = <span class="keyword">new</span> T[<span class="number">2</span>*arrayLength];</span><br><span class="line"><span class="comment">//复制</span></span><br><span class="line"><span class="keyword">int</span> start = (theFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line"><span class="keyword">if</span>(start&lt;<span class="number">2</span>)&#123;</span><br><span class="line">    copy(<span class="built_in">queue</span>+start, <span class="built_in">queue</span>+start+arrayLength<span class="number">-1</span>, newQueue);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//队列形成环</span></span><br><span class="line">    copy(<span class="built_in">queue</span>+start, <span class="built_in">queue</span>+arrayLength, newQueue);</span><br><span class="line">    copy(<span class="built_in">queue</span>, <span class="built_in">queue</span>+theBack+<span class="number">1</span>, newQueue+arrayLength-start);</span><br><span class="line">&#125;</span><br><span class="line">theFront = <span class="number">2</span>*arrayLength<span class="number">-1</span>;</span><br><span class="line">theBack = arrayLength<span class="number">-2</span>;</span><br><span class="line">arrayLength *= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="built_in">queue</span>;</span><br><span class="line"><span class="built_in">queue</span> = newQueue;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//删除队首</span></span><br><span class="line">    <span class="keyword">if</span>(theFront == theBack)&#123;</span><br><span class="line">        ..</span><br><span class="line">    &#125;</span><br><span class="line">    theFront = (theFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    <span class="built_in">queue</span>[theFront].~T();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列车车厢重排</p><hr><p><span id="jump10">chapter10  跳表和散列</span></p><p>字典：形如(k,v)的数对所组成的集合，其中k是关键字，v是与关键字对应的值。任意两个数对，其关键字都不等。</p><p>线性表描述：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>, <span class="title">class</span> <span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">pair</span>&lt;const K, E&gt;* <span class="title">sortedChain</span>&lt;K,E&gt;:</span>:find(<span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span>&#123;</span><br><span class="line">pairNode&lt;K,E&gt;* currentNode = firstNode;</span><br><span class="line">    <span class="keyword">while</span>(currentNode != <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">         currentNode-&gt;element.first != theKey)&#123;</span><br><span class="line">     currentNode = currentNode-&gt;next;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(currentNode != <span class="literal">NULL</span> &amp;&amp; </span><br><span class="line">       currentNode-&gt;element.first == theKey)&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;currentNode-&gt;element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>, <span class="title">class</span> <span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">sortedChain</span>&lt;K,E&gt;:</span>:insert(<span class="keyword">const</span> pair&lt;<span class="keyword">const</span> K,E&gt;&amp; thePair)&#123;</span><br><span class="line">pairNode&lt;K,E&gt; *p = firstNode, *tp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;element.first &lt; thePair.first)&#123;</span><br><span class="line">        tp = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;element.first == thePair.first)&#123;</span><br><span class="line">        <span class="comment">//替换旧值</span></span><br><span class="line">        p-&gt;element.second = thePair.seconde;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无配对</span></span><br><span class="line">    pairNode&lt;K,E&gt; *newNode = <span class="keyword">new</span> pairNode&lt;K,E&gt;(thePair, p);</span><br><span class="line">    <span class="keyword">if</span>(tp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        firstNode = newNode;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        tp-&gt;next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    dSize++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>, <span class="title">class</span> <span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">sortedChain</span>&lt;K,E&gt;:</span>:erase(<span class="keyword">const</span> k&amp; theKey)&#123;</span><br><span class="line">pairNode&lt;K,E&gt; *p = firstNode, *tp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">          p-&gt;element.first &lt; theKey)&#123;</span><br><span class="line">        tp = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;element.first == theKey)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tp == <span class="literal">NULL</span>) firstNode = p-&gt;next;<span class="comment">//要删除p所以first往后</span></span><br><span class="line">        <span class="keyword">else</span> tp-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        dSize--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳表：在链表的中部节点加一个指针，可减少比较次数。查找一个数对，首先和中间比较，查找关键字小则在左部分找。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>, <span class="title">class</span> <span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">pair</span>&lt;const K,E&gt;* <span class="title">skipList</span>&lt;K,E&gt;:</span>:find(<span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(theKey &gt;= tailKey)</span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    skipNode&lt;K,E&gt;* beforeNode = headNode;<span class="comment">//theKey之前，最右边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=levels; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="comment">//从上级到下级</span></span><br><span class="line">        <span class="keyword">while</span>(beforeNode-&gt;next[i]-&gt;element.first &lt; theKey)&#123;</span><br><span class="line">            beforeNode = beforeNode-&gt;next[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(beforeNode-&gt;next[<span class="number">0</span>]-&gt;element.first == theKey)&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;beforeNode-&gt;next[<span class="number">0</span>]-&gt;element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>, <span class="title">class</span> <span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">skipNode</span>&lt;K,E&gt;* <span class="title">skipList</span>&lt;K,E&gt;:</span>:search(<span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span>&#123;</span><br><span class="line">skipNode&lt;K,E&gt;* beforeNode = headerNode;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=levels; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(beforeNode-&gt;next[i]-&gt;element.first &lt; theKey)&#123;</span><br><span class="line">            beforeNode = beforeNoe-&gt;next[i];</span><br><span class="line">        &#125;</span><br><span class="line">        last[i] = beforeNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beforeNode-&gt;next[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>, <span class="title">class</span> <span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">skipList</span>&lt;K,E&gt;:</span>:insert(<span class="keyword">const</span> pair&lt;<span class="keyword">const</span> K, E&gt;&amp; thePair)&#123;</span><br><span class="line">    <span class="keyword">if</span>(thePair.first &gt;= tailKey)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;    </span><br><span class="line">    skipNode&lt;K,E&gt;* theNode = search(thePair.first);</span><br><span class="line">    <span class="keyword">if</span>(theNode-&gt;element.first == thePair.first)&#123;</span><br><span class="line">        theNode-&gt;element.second == thePair.second;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> theLevel = level();</span><br><span class="line">    <span class="keyword">if</span>(theLevel &gt; levels)&#123;</span><br><span class="line">        theLevel = ++levels;</span><br><span class="line">        last[theLevel] = headerNode;</span><br><span class="line">    &#125;</span><br><span class="line">    skipNode&lt;K,E&gt;* newNode = <span class="keyword">new</span> skipNode&lt;K,E&gt;(thePair, theLevel+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=theLevel; i++)&#123;</span><br><span class="line">        <span class="comment">//插入i级链表</span></span><br><span class="line">        newNode-&gt;next[i] = last[i]-&gt;next[i];</span><br><span class="line">        last[i]-&gt;next[i] = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    dSize++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>, <span class="title">class</span> <span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">skipList</span>&lt;k,E&gt;:</span>:erase(<span class="keyword">const</span> K&amp; theKey)&#123;</span><br><span class="line">    <span class="keyword">if</span>(theKey &gt;= tailKey)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;      </span><br><span class="line">    skipNode&lt;K,E&gt;* theNode = search(theKey);</span><br><span class="line">    <span class="keyword">if</span>(theNode-&gt;element.first != theKey)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=levels &amp;&amp; last[i]-&gt;next[i]==theNode; i++)&#123;</span><br><span class="line">        last[i]-&gt;next[i] = theNode-&gt;next[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(levels&gt;<span class="number">0</span> &amp;&amp; headerNode-&gt;next[levels]==tailNode)&#123;</span><br><span class="line">        levels--;</span><br><span class="line">        <span class="keyword">delete</span> theNode;</span><br><span class="line">        dSize--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>散列：用一个散列函数把字典的数对映射到一个散列表。</p><p>桶：散列表的每个位置叫一个桶，对关键字为k 的桶，f(k)是起始桶，桶的数量等于散列表的长度或大小。</p><p>除法散列函数：f(k) = k%D。理想的D，既是素数又不能被小于20的数整除。</p><p>冲突：当两个不同的关键字所对应的起始桶相同</p><p>溢出：如果存储桶没有空间存储一个数列</p><p>均匀散列函数</p><p>线性探查：找到下一个可用的桶。。</p><p>搜索方法：首先搜索起始桶f(k)，然后把散列表当做环表继续继续搜索下一个桶，直到以下情况之一发生为止：（1）存有关键字k的桶已找到；（2）到达一个空桶；（3）又回到起始桶f(k)。后两种说明关键字为k的数对不存在。</p><p>删除方法：<strong>①</strong>删除关键字后，需要一移动若干个数对。从删除位置的下一个桶开始，逐个检查每个桶，以确定要移动的元素，直至到达一个空桶或回到删除位置为止。在做删除移动时，不要把一个数对移到它的起始桶之前，否则查找会失败。<strong>②</strong>为每个桶增加一个域neverUsed。在散列表初始化时，这个域被置为true，当一个数对存入一个桶中时，置为false。搜索的结束条件： （2）变成neverUsed为tue。</p><p>链式散列：如果散列表的每一个桶可以容纳无限多的记录，则不存在溢出问题。给每个散列表的位置配置一个线性表。</p><hr><p><span id="jump11">chapter11  二叉树和其他树</span></p><p>一棵树t是一个非空的有限元素集合，其中一个元素为根，其余的元素组成t的子树。</p><p>级：level，树根是1级，其孩子是2级，..</p><p>一棵树的高度或深度：树中级的个数</p><p>一个元素的度：其孩子的个数</p><p>一棵树的度：其元素的度的最大值</p><p>二叉树：binary tree，t是有限个元素的集合（可以为空）。当二叉树非空时，其中有一个元素称为根，余下的元素被划分为两棵二叉树，分别称为t的左子树和右子树。</p><p>二叉树和树的根本区别：（1）二叉树的每个元素都恰好有两棵子树。树的每个元素可以有任意数量的子树。（2）二叉树中每个元素的子树都是有序的，有左子树和右子树之分。树的子树是无序的。（二叉树可以为空，但是树不能为空）</p><p>算术表达式树没有括号。</p><p>二叉树的特性：（1）一棵二叉树有n个元素，n&gt;0，它有n-1条边。（2）一棵二叉树的高度为h，h&gt;=0，它最少有h个元素，最多有2^h-1个元素。（3）一棵二叉树有n个元素，n&gt;0，它的高度最大为n，最小高度为log2(n+1)。当高度为2^h-1个元素时，称为满二叉树。</p><p>对高度为h的满二叉树的元素，从第一层到最后一层，在每一次中从左至右，顺序编号，删除k个其编号为2^h-i元素，1&lt;=i&lt;=k&lt;2^h，得到完全二叉树。</p><p>设完全二叉树的一元素其编号为i，（1）i=1，为根，i&gt;1，父节点为i/2取整。（2）2i&gt;n，元素无左孩子，否则左孩子为2i。（3）2i+1&gt;n，无右孩子，否则右孩子为2i+1。</p><p>数组描述：把二叉树看成是缺少了部分元素的完全二叉树。</p><p>链表描述：节点两个指针域，leftChild，rightChild，一个element。</p><p>二叉树遍历：（1）前序遍历，根左右。（2）中序遍历，左根右。（3）后序遍历，左右根。（4）层次遍历。复杂性均为O(n)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        visit(t);</span><br><span class="line">        preOrder(t-&gt;leftChild);</span><br><span class="line">        preOrder(t-&gt;rigthChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(binaryTreeNode&lt;T&gt;* t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        preOrder(t-&gt;leftChild);</span><br><span class="line">        visit(t);</span><br><span class="line">        preOrder(t-&gt;rigthChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(binaryTreeNode&lt;T&gt;* t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        preOrder(t-&gt;leftChild);</span><br><span class="line">        preOrder(t-&gt;rigthChild);</span><br><span class="line">        visit(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在层次遍历中，从顶层到底层，在同一层中，从左到右，依次访问树的元素，需要队列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(binaryTreeNode&lt;T&gt;* t)</span></span>&#123;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(t != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        visit(t);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            q.push(t-&gt;leftChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rigthChild != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            q.push(t-&gt;rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;t = q.front();&#125;</span><br><span class="line">        <span class="keyword">catch</span>&#123;..&#125;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//确定树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> height(root);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> linkedBinaryTree&lt;E&gt;::height(BinaryTreeNode&lt;T&gt;* t)&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hl = height(t-&gt;leftChild);</span><br><span class="line">    <span class="keyword">int</span> hr = height(t-&gt;rightChild);</span><br><span class="line">    <span class="keyword">if</span>(hl &gt; hr)</span><br><span class="line">        <span class="keyword">return</span> ++hl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ++hr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当树t有节点超过两个孩子时，依然用二叉树表示。对每个节点x，可用其孩子节点的rightChild指针把x的所有孩子连成一条链表。x节点的leftChild指针指向该链表的第一个节点。</p><p>并查集：把每一个集合表示为一棵树，在查找时，我们把根元素作为集合标志符。为了确定元素theElement属于哪一个集合，从theElement节点开始，沿着节点到其父节点向上移动，直到根节点为止。</p><hr><p><span id="jump12">chapter12  优先级队列</span></p><p>优先级队列：是0个或多个元素的集合，每个元素都有一个优先级或值，操作top()  push()  pop()。最小/大优先级队列。相同优先级，任意顺序处理。</p><p>堆：一棵大根树，每个节点的值都大于或等于其子节点的值。一个大根堆，既是大根树也是完全二叉树。</p><p>插入：把新元素插入新节点，然后沿着从新节点到根节点的路径，执行一趟起泡操作，将新元素与其父节点的元素比较交换，直到后者大于或等于前者为止。</p><p>删除：删除根节点元素，把最后位置的删除，从根节点开始调整-&gt;最大堆/小。</p><p>O(height) = O(logn)</p><p>初始化：在空堆中执行n次插入操作。O(nlogn)</p><p>为了将完全二叉树转换成最大堆，从最后一个具有孩子的节点开始检查。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> maxHeap&lt;T&gt;::push(<span class="keyword">const</span> T&amp; theElement)&#123;</span><br><span class="line">    <span class="keyword">if</span>(heapSize == arrayLength<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">//数组长度加倍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//寻找插入位置</span></span><br><span class="line">    <span class="comment">//从新叶子向上移动</span></span><br><span class="line">    <span class="keyword">int</span> currentNode = ++heapSize;</span><br><span class="line">    <span class="keyword">while</span>(currentNode!=<span class="number">1</span> &amp;&amp; heap[currentNode/<span class="number">2</span>]&lt;theElement)&#123;</span><br><span class="line">        <span class="comment">//父节点小于..</span></span><br><span class="line">        heap[currentNode] = heap[currentNode/<span class="number">2</span>];</span><br><span class="line">        currentNode /= <span class="number">2</span>;<span class="comment">//父节点移下来</span></span><br><span class="line">    &#125;</span><br><span class="line">    heap[currentNode] = theElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> maxHeap&lt;T&gt;::pop()&#123;</span><br><span class="line">    <span class="keyword">if</span>(heapSize == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> queueEmpty();</span><br><span class="line">    heap[<span class="number">1</span>].~T();</span><br><span class="line">    T lastElement = heap[heapSize--];</span><br><span class="line">    <span class="keyword">int</span> currentNode = <span class="number">1</span>,</span><br><span class="line">    child = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(child &lt;= heapSize)&#123;</span><br><span class="line">        <span class="keyword">if</span>(child&lt;heapSize &amp;&amp; heap[child]&lt;heap[child+<span class="number">1</span>])&#123;</span><br><span class="line">            child++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(lastElement &gt;= heap[child])&#123;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//可以放在这个位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不可以</span></span><br><span class="line">        heap[currentNode] = heap[child];</span><br><span class="line">        currentNode = child;</span><br><span class="line">        child *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    heap[currentNode] = lastElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> maxHeap&lt;T&gt;::initialize(T *theHeap, <span class="keyword">int</span> theSize)&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">delete</span> [] heap;</span><br><span class="line">    heap = theHeap;</span><br><span class="line">    heapSize = theSize;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> root=heapSize/<span class="number">2</span>; root&gt;=<span class="number">1</span>; root--)&#123;</span><br><span class="line">        T rootElement = heap[root];</span><br><span class="line">        <span class="keyword">int</span> child = <span class="number">2</span>*root;</span><br><span class="line">        <span class="keyword">while</span>(child &lt;= heapSize)&#123;</span><br><span class="line">            <span class="keyword">if</span>(child&lt;heapSize &amp;&amp; heap[child]&lt;heap[child+<span class="number">1</span>])&#123;</span><br><span class="line">                child++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(rootElement &gt;= heap[child])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            heap[child/<span class="number">2</span>] = heap[child];</span><br><span class="line">            child *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        heap[child/<span class="number">2</span>] = rootElement;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆排序</p><p>霍夫曼编码：利用小根堆实现，小根堆的每个元素包括一棵二叉树和它的权。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">linkedBinaryTree&lt;<span class="keyword">int</span>&gt;* huffmanTree(T weight[],<span class="keyword">int</span> n)&#123;</span><br><span class="line">    huffmanNode&lt;T&gt; *hNode = <span class="keyword">new</span> huffmanNode&lt;T&gt;[n+<span class="number">1</span>];</span><br><span class="line">    linkedBinaryTree&lt;<span class="keyword">int</span>&gt; emptyTree;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        hNode[i].weight = weight[i];</span><br><span class="line">        hNode[i].tree = <span class="keyword">new</span> linkedBinaryTree&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line">        hNode[i].tree-&gt;makeTree(i, emptyTree, emptyTree);</span><br><span class="line">    &#125;</span><br><span class="line">    minHeap&lt;huffmanNode&lt;T&gt; &gt; heap(<span class="number">1</span>);</span><br><span class="line">    heap.initialize(hNode, n);</span><br><span class="line">    huffmanNode&lt;T&gt; w, x, y;<span class="comment">//从小根堆中提取两个树合并，直到剩下一棵树</span></span><br><span class="line">    linkedBinaryTree&lt;<span class="keyword">int</span>&gt;*z;</span><br><span class="line">    fo(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">        x = heap.top(); heap.pop();</span><br><span class="line">        y = heap.top(); heap.pop();</span><br><span class="line">        z = <span class="keyword">new</span> linkedBinaryTree&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line">        z-&gt;makeTree(<span class="number">0</span>, *x.tree, *y.tree);</span><br><span class="line">        w.weight = x.weight+y.weight;</span><br><span class="line">        w.tree = z;</span><br><span class="line">        heap.push(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">delete</span> x.tree;</span><br><span class="line">        <span class="keyword">delete</span> y.tree;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> heap.top().tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><span id="jump14">chapter14  搜索树</span></p><p>二叉搜索树：一棵二叉树，可能为空；一棵非空二叉搜索树满足：（1）每个元素有一个关键字，并且任意两个元素的关键字都不同。所有关键字都是唯一的。（2）在根节点的左子树中，元素的关键字都小于根节点的关键字。（3）在根节点的右子树中，元素的关键字都大于根节点的关键字。（4）根节点的左、右子树也都是二叉搜索树。</p><p>索引二叉搜索树：在每个节点中添加一个leftSize域，这个域的值是该节点左子树的元素个数。</p><p>二叉搜索树的元素数量和形状随着操作而改变，所以用链表。</p><p>搜索：查找关键字为theKey的元素，先从根开始查找，如果根为空，那么搜索树不包含；如果不空，将theKey与根的关键字比较。如果theKey小，则在左子树中查找；大则在右子树中找；等于则查找成功。O(h)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="keyword">const</span> K,E&gt;* binarySearchTree&lt;K,E&gt;::find(<span class="keyword">const</span> K&amp; theKey) <span class="keyword">const</span>&#123;</span><br><span class="line">    binaryTreeNode&lt;pair&lt;<span class="keyword">const</span> K,E&gt;&gt; *p = root;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(theKey &lt; p-&gt;element.first)&#123;</span><br><span class="line">            p = p-&gt;leftChild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(theKey &gt; p-&gt;element.first)&#123;</span><br><span class="line">                p = p-&gt;rightChild;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &amp;p-&gt;element;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入：插入新元素thePair，首先通过查找确定是否存在关键字与要插入的相同。搜索成功就替换；不成功就将新元素作为搜索中断节点的孩子插入。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> binarySearchTree&lt;K,E&gt;::insert(<span class="keyword">const</span> pair&lt;<span class="keyword">const</span> K,E&gt;&amp; thePair)&#123;</span><br><span class="line">    binaryTreeNode&lt;pair&lt;<span class="keyword">const</span> K,E&gt;&gt; *p = root, *pp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        pp = p;</span><br><span class="line">        <span class="keyword">if</span>(thePair.first &lt; p-&gt;element.first)&#123;</span><br><span class="line">            p = p-&gt;leftChild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(thePair.first &gt; p-&gt;element.first)&#123;</span><br><span class="line">                p = p-&gt;rightChild;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p-&gt;element.second = thePair.second;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    binaryTreeNode&lt;pair&lt;<span class="keyword">const</span> K,E&gt;&gt; *newNode</span><br><span class="line">        = <span class="keyword">new</span> binaryTreeNode&lt;pair&lt;<span class="keyword">const</span> K,E&gt;&gt;(thePair);</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(thePair.first &lt; pp-&gt;element.first)&#123;</span><br><span class="line">            pp-&gt;leftChild = newNode;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pp-&gt;rightChild = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        root = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    treeSize++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除：删除p（1）p是树叶，释放空间，若是根节点则为NULL。（2）p只有一棵非空子树，p是根节点，则p的唯一子树的根节点成为根节点，如果p有父节点pp，则修改pp的指针域，使其指向p的唯一孩子，释放节点p。（3）p有两棵非空子树，先将该节点替换为其左子树的最大元素或者右子树的最小元素，然后把替换元素的节点删除。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> binarySearchTree&lt;K,E&gt;::erase(<span class="keyword">const</span> K&amp; theKey)&#123;</span><br><span class="line">    binaryTreeNode&lt;pair&lt;<span class="keyword">const</span> K,E&gt;&gt; *p = root, *pp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;elemnt.first != theKey)&#123;</span><br><span class="line">        pp = p;</span><br><span class="line">        <span class="keyword">if</span>(theKey &lt; p-&gt;element.first)&#123;</span><br><span class="line">            p = p-&gt;leftChild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p = p-&gt;rightChild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;leftChild != <span class="literal">NULL</span> &amp;&amp; p-rightChild !=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">//转变成另外两种情况</span></span><br><span class="line">        binaryTreeNode&lt;pair&lt;<span class="keyword">const</span> K,E&gt;&gt; *s = p-&gt;leftChild,</span><br><span class="line">        *ps = p;</span><br><span class="line">        <span class="keyword">while</span>(s-&gt;rightChild != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ps = s;</span><br><span class="line">            s = s-&gt;rightChild;<span class="comment">//max</span></span><br><span class="line">        &#125;</span><br><span class="line">        binaryTreeNode&lt;pair&lt;<span class="keyword">const</span> K,E&gt;&gt; *q = </span><br><span class="line">            <span class="keyword">new</span> binaryTreeNode&lt;pair&lt;<span class="keyword">const</span> K,E&gt;&gt;(s-&gt;element, p-&gt;leftChild, p-&gt;rightChild);</span><br><span class="line">        <span class="keyword">if</span>(pp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            root = q;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p == pp-&gt;leftChild)&#123;</span><br><span class="line">            pp-&gt;leftChild = q;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pp-&gt;rightChild = q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ps == p) pp = q;<span class="comment">//无孩子</span></span><br><span class="line">        <span class="keyword">else</span> pp = ps;<span class="comment">//1个</span></span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = s;</span><br><span class="line">    &#125;</span><br><span class="line">    binaryTreeNode&lt;pari&lt;<span class="keyword">const</span> K,E&gt;&gt; *c;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;leftChild != <span class="literal">NULL</span>)</span><br><span class="line">        c = p-&gt;leftChild;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        c = p-&gt;rightChild;</span><br><span class="line">    <span class="keyword">if</span>(p == root)</span><br><span class="line">        root = c;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == pp-&gt;leftChild)</span><br><span class="line">            pp-&gt;leftChild = c;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p-&gt;rightChild = c;</span><br><span class="line">    &#125;</span><br><span class="line">    treeSize--;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉搜索树的高度：O(logn)</p><p>索引二叉搜索树：一个节点的数值域：leftSize、key、value。</p><hr><p><span id="jump15">chapter15  平衡搜索树</span></p><p><img src="/uploads/ds1.jpg" alt=""></p><p>AVL树：最坏情况下的高度为O(logn)的树称为平衡树。一棵空的二叉树是AVL树；如果T是一棵非空二叉树，TL和TR分别是其左子树和右子树，那么T满足以下条件时，T是一棵AVL树：1）TL和TR是AVL树；2）|hL-hR|&lt;=1。</p><p>一棵AVL搜索树既是二叉搜索树，又是AVL树。</p><p>AVL树特征：（1）一棵n个元素的AVL树，其高度是O(logn)。（2）对于每一个n，n&gt;=0，都存在一棵AVL树；（3）对一棵n元素的AVL搜索树，在O(logn)时间内可实现查找；（4）将一个新元素插入一棵n元素的AVL搜索树总，可以得到一棵n+1个元素的AVL树，而且插入用时为O(logn)；（5）一个元素从一棵n元素的AVL搜索树中删除，可以得到一棵n-1个元素的AVL树，而且用时为O(logn)。</p><p>AVL树一般用链表描述，为每个节点增加一个平衡因子bf，节点x的平衡因子bf(x)定义为：x的左子树高度-x的右子树高度。可能取值：-1,0,1。</p><p>AVL搜索树的插入：插入导致不平衡的几种情况：（1）不平衡树中，平衡因子的值限于：-2,-1,0,1,2。（2）平衡因子为2的节点在插入前的平衡因子为1.（3）只有从根到新插入节点的路径上的节点的平衡因子在插入后会改变。（4）假设A是离新插入节点最近的祖先，且平衡因子是-2或2，在插入前，从A到新插入节点的路径上，所有节点的平衡因子都是0。</p><p>一棵树从平衡变为不平衡的唯一过程：在插入操作之后，平衡因子bf(X)的值由-1变为-2，或者由1变为2。后一种情况只有在X的左子树XL中进行插入时才会出行。</p><p><img src="/uploads/ds2.jpg" alt=""></p><p><img src="/uploads/ds3.jpg" alt=""></p><p>B树：</p><p>m叉索引树：可以是一棵空树，如果非空，必须满足以下特征：（1）在相应的扩充搜索树中，每个内部节点最多可以有m个孩子以及1~m-1个元素。（2）每一个含有p个元素的节点都有p+1个孩子。（3）对任意一个含有p个元素的节点，设k1,k2…,kp分别为关键字，k1&lt;k2&lt;..&lt;kp，设c0,c1,..,cp是该节点的p+1个孩子。在以c0为根的子树中，元素的关键字小于k1；在以cp为根的子树中，元素的关键字大于kp；…</p><p><img src="/uploads/ds4.jpg" alt=""></p><p>m叉搜索树的搜索：先从根节点开始，位于…，按照指针往下找。搜索中间子树的根，…找到或到达外部节点没找到。</p><p>m叉搜索树的插入：先查找，在x节点处查找失败，根据节点可容纳元素的个数插入位置。还可以加则根据大小插入，已经满了则生成一个新节点容纳。</p><p>m叉搜索树的删除：首先查找，（1）子节点都空，可以直接删除；（2）子节点至少有一个为空，用相邻非空子树的最大元素替换；（3）在根节点中删除，可能有多次替换。</p><p>m叉搜索树的高：logm(n+1)~n</p><p>m阶B-树：是一棵m叉搜索树，如果B-树非空，那么特征：（1）根节点至少有2个孩子；（2）除根节点外，所有内部节点至少有&gt;=m/2个孩子；（3）所有外部节点在同一层，不算在高度里。</p><p>B-树的高度：设T是一棵高度为h的m阶B-树。令d=「m/2，则（1）2d^(h-1)&lt;=n&lt;=m^h-1；（2）logm(n+1)&lt;=h&lt;=logd((n+1)/2)+1</p><p>B-树的搜索：与m叉搜索树的算法类似。</p><p>B-树的插入：首先查找，如果不存在则将元素插入在搜索路径中所遇到的最后一个内部节点中。不允许有重复的关键字。</p><p>B树的删除：（1）该元素位于叶节点，（2）该元素位于非叶节点，（2）可转变成（1），过程是用一个元素来替换被删除元素，可以是左相邻子树最大的或者是右相邻子树最小的，替换元素必须在叶节点。只讨论情况（1）。①如果要删除的元素所在的叶节点其元素个数大于最少数，则直接删除</p><hr><p><span id="jump16">chapter16  图</span></p><p>图：有限集V和E的有序对，其中V的元素称为顶点，E的元素称为边。每一条边连接两个不同的顶点，而且用元组(i,j)表示，i,j为顶点。</p><p>有向边：带方向；无向边：不带方向。</p><p>当且仅当(i,j)是图的边，称顶点i和j是邻接的。边(i,j)关联于顶点i,j。</p><p>有向边(i,j)是关联至顶点j，关联于顶点i。顶点i邻接至顶点j，顶点j邻接于顶点i。</p><p>一个图是不能有重复的边，在无向图的任意两个顶点之间，最多只能有一条边。在有向图的任意两个顶点i,j之间，i到j至多一条边，j到i至多一条边。一个图不可能包含自连边/环。</p><p>权：每条边赋予一个表示成本的值。</p><p>G=(V,E)，G是连通的，当且仅当G的每一对顶点之间都有一条路径。如果H的顶点和边的集合分别是G的顶点和边的集合的子集，那么称H是G的<strong>子图</strong>。</p><p>一条始点和终点相同的简单路径称为<strong>环路</strong>。</p><p>没有环路的连通无向图是一棵<strong>树</strong>。</p><p>一个G的子图，如果包含G的所有顶点，且是一棵树，则称为G的<strong>生成树</strong>。</p><p>一个具有n个顶点的连通无向图至少有n-1条边。</p><p>在一个无向图中，有一个顶点i相关联的边数称为该顶点的度di。</p><p>特性：（1）∑d = 2e；（2）0&lt;=e&lt;=n(n-1)/2</p><p>一个具有n个顶点和n(n-1)/2条边的无向图是一个完全图。</p><p>设G是一个有向图，顶点i的入度指关联至该顶点的边数。顶点i的出度是指关联于该顶点的边数。</p><p>特性：（1）0&lt;=e&lt;=n(n-1)；（2）∑din = ∑dout = e</p><p>无权图的描述：邻接矩阵，邻接链表，邻接数组。</p><p>图的遍历：</p><p>BFS，广度优先搜索，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> reach[], <span class="keyword">int</span> label)</span></span>&#123;</span><br><span class="line">    arrayQueue&lt;<span class="keyword">int</span>&gt; q(<span class="number">10</span>);</span><br><span class="line">    reach[v] = label;</span><br><span class="line">    q.push(v);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> w = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vertexIterator&lt;T&gt; *iw = iterator(w);</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        <span class="keyword">while</span>((u=iw-&gt;next()) != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(reach[u] == <span class="number">0</span>)&#123;</span><br><span class="line">                q.push(u);</span><br><span class="line">                reach[u] = label;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> iw;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DFS，深度优先搜索</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> reach[], <span class="keyword">int</span> label)</span></span>&#123;</span><br><span class="line">    graph&lt;T&gt;::reach = reach;</span><br><span class="line">    graph&lt;T&gt;::label = label;</span><br><span class="line">    rDfs(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rDfs</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    reach[v] = label;</span><br><span class="line">    vertexIterator&lt;T&gt; *iv = iterator(v);</span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">while</span>((u=iv-&gt;next()) != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(reach[u] == <span class="number">0</span>)&#123;</span><br><span class="line">            rDfs(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> iv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><span id="junp17">chapter17  贪婪算法</span></p><p>贪婪算法：greedy method，逐步构造一个最优解。每一步，在一定的标准下，作出一个最优决策。在每一步作出的决策，在以后的步骤中都不可更改。做出决策所依据的标准称为贪婪准则。</p><p>拓扑排序：任务有先后顺序，有向图表示，顶点活动网络（AOV，activity on vertex）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topologicalOrder</span><span class="params">(<span class="keyword">int</span> *theOrder)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = numberOfVertices();</span><br><span class="line">    <span class="comment">//计算入度</span></span><br><span class="line">    <span class="keyword">int</span> *inDegree = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    fill(inDegree+<span class="number">1</span>, inDegree+n+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        vertexIterator&lt;T&gt; *ii = iterator(i);</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        <span class="keyword">while</span>((u=ii-&gt;next()) != <span class="number">0</span>)&#123;</span><br><span class="line">            inDegree[u]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入度=0的顶点入栈</span></span><br><span class="line">    arrayStack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">stack</span>.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">stack</span>.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> nextVertex = <span class="built_in">stack</span>.top();</span><br><span class="line">        <span class="built_in">stack</span>.pop();</span><br><span class="line">        theOrder[j++] = nextVertex;</span><br><span class="line">        vertexIterator&lt;T&gt; *iNextVertex = iterator(nextVertex);</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        <span class="keyword">while</span>((u=iNextVertex-&gt;next()) != <span class="number">0</span>)&#123;</span><br><span class="line">            inDegree[u]--;</span><br><span class="line">            <span class="keyword">if</span>(inDegree[u] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">stack</span>.push(u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (j == n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单源最短路径：</p><p>predecessor[i]是从源顶点到达顶点i的路径中顶点i前面的那个顶点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shortestPath</span><span class="params">(<span class="keyword">int</span> sourceVertex, T* distanceFromSource, <span class="keyword">int</span>* predecessor)</span></span>&#123;</span><br><span class="line">    <span class="comment">//distanceFromSource中返回最短路径</span></span><br><span class="line">    graphChain&lt;<span class="keyword">int</span>&gt; newReachableVertices;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        distanceFromSource[i] = a[sourceVertex][i];</span><br><span class="line">        <span class="keyword">if</span>(distanceFromSource[i] == noEdge)&#123;</span><br><span class="line">            predecessor[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            predecessor[i] = sourceVertex;</span><br><span class="line">            newReachableVertices.insert(<span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    distanceFromSource[sourceVertex] = <span class="number">0</span>;</span><br><span class="line">    predecessor[sourceVertex] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!newReachableVertices.empty())&#123;</span><br><span class="line">        chain&lt;<span class="keyword">int</span>&gt;::iterator iNewReachableVertices = newReachableVertices.begin();</span><br><span class="line">        chain&lt;<span class="keyword">int</span>&gt;::iterator theEnd = newReachableVertices.end();</span><br><span class="line">        <span class="keyword">int</span> v = *iNewReachableVertiecs;</span><br><span class="line">        iNewReachableVertices++;</span><br><span class="line">        <span class="keyword">while</span>(iNewReachableVertices != theEnd)&#123;</span><br><span class="line">            <span class="keyword">int</span> w = *iNewReachableVertices;</span><br><span class="line">            iNewReachableVertices++;</span><br><span class="line">            <span class="keyword">if</span>(distanceFromSource[w] &lt; distanceFromSource[v])&#123;</span><br><span class="line">                v = w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        newReachableVertices.eraseElement(v);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[v][j]!=noEdge &amp;&amp; (predecessor[j]==<span class="number">-1</span> || distanceFromSource[j]&gt;distanceFromSource[v]+a[v][j]))&#123;</span><br><span class="line">                distanceFromSource[j] = distanceFromSource[v]+a[v][j];</span><br><span class="line">                <span class="keyword">if</span>(predecessor[j] == <span class="number">-1</span>)&#123;</span><br><span class="line">                    newReachableVertices.insert(<span class="number">0</span>, j);</span><br><span class="line">                &#125;</span><br><span class="line">                predecessor[j] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最小生成树</p><p>kruskal：分步骤选择n-1条边，每步选择一条边，贪婪准则：从剩下的边中，选择一条权最小且不会产生环路的边加入已经选择的边集。O(n+eloge)</p><p>Prim：分布选边来创建最小生成树，而且一步选择一条边。贪婪准则：从剩余的边中，选择一条成本最小的边，并且把他们加入已选的边集中形成一棵<strong>树</strong>。快一点。O(n^2)</p><p>Sollin：△</p><hr><p><span id="jump18">chapter18  分而治之</span></p><p>归并排序</p><p>快速排序</p><p>选择：从n元素数组a[0:n-1]中找出第k小的元素。首先对n个元素的数组a[0:n-1]排序，然后取出a[k-1]中的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">select</span><span class="params">(T a[], <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = indexOfMax(a, n);</span><br><span class="line">    swap(a[n<span class="number">-1</span>], a[max]);</span><br><span class="line">    <span class="keyword">return</span> select(a, <span class="number">0</span>, n<span class="number">-1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">select</span><span class="params">(T a[], <span class="keyword">int</span> leftEnd, <span class="keyword">int</span> rightEnd, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(leftEnd &gt;= rightEnd)</span><br><span class="line">        <span class="keyword">return</span> a[leftEnd];</span><br><span class="line">    <span class="keyword">int</span> leftCursor = leftEnd,</span><br><span class="line">    rightCursor = rightEnd+<span class="number">1</span>;</span><br><span class="line">    T pivot = a[leftEnd];</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            leftCursor++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(a[leftCursor] &lt; pivot);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            rightCursor--;</span><br><span class="line">        &#125;<span class="keyword">while</span>(a[rightCursor] &gt; pivot);</span><br><span class="line">        <span class="keyword">if</span>(leftCursor &gt;= rightCursor) <span class="keyword">return</span>;</span><br><span class="line">        swap(a[leftCursor], a[rightCursor]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rightCursor-leftEnd+<span class="number">1</span> == k)&#123;</span><br><span class="line">        <span class="keyword">return</span> pivot;</span><br><span class="line">    &#125;</span><br><span class="line">    a[leftEnd] = a[rightCursor];</span><br><span class="line">    a[rightCursor] = pivot;</span><br><span class="line">    <span class="keyword">if</span>(rightCursor-leftEnd+<span class="number">1</span> &lt; k)&#123;</span><br><span class="line">        <span class="keyword">return</span> select(a, rightCursor+<span class="number">1</span>, rightEnd,</span><br><span class="line">                     k-rightCursor+leftEnd<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> select(a, leftEnd, rightCursor<span class="number">-1</span>, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><span id="jump19">chapter19  动态规划</span></p><p>所有顶点对之间的最短路径：</p><p>可以Dijkstra算法n次求解。</p><p>Floy算法：假设图G有n个顶点，且从1到n编号，c(i,j,k)表示从顶点I到j的一条最短路径的长度，其中间顶点的编号不都大于k。如果(i,j)存在，则c(i,j,0)表示该边长度。c(i,j,n)是从i到j的最短路径长度。</p><p>kay表示i到j的最短路径中的最大的k值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allPairs</span><span class="params">(T **c, <span class="keyword">int</span> **kay)</span></span>&#123;</span><br><span class="line">    <span class="comment">//initialize</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">            c[i][j] = a[i][j];</span><br><span class="line">            kay[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        c[i][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(c[i][k]!=noEdge &amp;&amp; c[k][j]!=noEdge &amp;&amp;</span><br><span class="line">                   (c[i][j]==noEdge || c[i][j]&gt;c[i][k]+c[k][j]))&#123;</span><br><span class="line">                    c[i][j] = c[i][k]+c[k][j];</span><br><span class="line">                    kay[i][j] = k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">indexOfMax</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>)&#123;</span></span><br><span class="line">    <span class="comment">//查找数组a[0:n-1]的最大元素</span></span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> illeaglaParameterValue(<span class="string">".."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> indexOfMax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[indexOfMax] &lt; a[i])&#123;</span><br><span class="line">            indexOfMax = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> indexOfMax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、选择排序</p><p>首先找出最大的元素，把它调a[n-1]，然后在余下的n-1个元素中找出最大的元素，把它移到a[n-2]，如此直到剩下一个元素。</p><p>比较次数：n(n-1)/2，移动次数：3(n-1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">selectionSort</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>)&#123;</span></span><br><span class="line">    <span class="comment">//选择排序a[0:n-1]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> size=n; size&gt;<span class="number">1</span>; size--)&#123;</span><br><span class="line">        <span class="comment">//先找出n个元素中最大的，再n-1中的,..</span></span><br><span class="line">        <span class="keyword">int</span> j = indexOfMax(a, size);<span class="comment">//size  not n</span></span><br><span class="line">        swap(a[j], a[size<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>及时终止的选择排序：</p><p>为了去除不必要的迭代，在查找最大元素时，同时检查数组是否已经有序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">selectionSort</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>)&#123;</span></span><br><span class="line"><span class="comment">//及时终止的选择排序</span></span><br><span class="line">    <span class="keyword">bool</span> sorted = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> size=n; !sorted&amp;&amp;(size&gt;<span class="number">1</span>); size--)&#123;</span><br><span class="line">        <span class="keyword">int</span> indexOfMax = <span class="number">0</span>;</span><br><span class="line">        sorted = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//查找最大元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;size; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[indexOfMax] &lt;= a[i])</span><br><span class="line">                indexOfMax = i;<span class="comment">//index从0开始，大的在后面</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sorted = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a[indexOfMax], a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、冒泡排序</p><p>在一次冒泡过程中，相邻的元素比较，如果左边的元素大于右边的元素，则交换。把最大的元素移到序列最右端。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">bubble</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>)&#123;</span></span><br><span class="line">    <span class="comment">//一次冒泡，把a[0:n-1]中最大元素移到右边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;<span class="comment">//n-1</span></span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; a[i+<span class="number">1</span>])&#123;</span><br><span class="line">            swap(a[i], a[i+<span class="number">1</span>])；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">bubbleSort</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>)&#123;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;<span class="number">1</span>; i--)&#123;</span><br><span class="line">        bubble(a[], i);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>及时终止的冒泡排序：</p><p>如果在一次冒泡过程中没有发生元素互换，说明数组已经有序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">bubble</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>)&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> swapped = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; a[i+<span class="number">1</span>])&#123;</span><br><span class="line">            swap(a[i], a[i+<span class="number">1</span>]);</span><br><span class="line">            swapped = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> swapped;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">bubbleSort</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>)&#123;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;<span class="number">1</span>&amp;&amp;bubble(a,i); i++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、名词排序</p><p>计算出名次，就可以移到与其名次对应的位置。</p><p>名次：所有比该元素小的元素的个数加上在它左边出现的与它相同的元素的个数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">rank</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>, <span class="title">int</span> <span class="title">r</span>[])&#123;</span></span><br><span class="line">    <span class="comment">//计算名次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        r[i] = <span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//比较所有元素对</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)&#123;<span class="comment">//!</span></span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt;= a[i])</span><br><span class="line">                r[i]++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r[j]++;<span class="comment">//!</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">rearrange</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>, <span class="title">int</span> <span class="title">r</span>[])&#123;</span></span><br><span class="line">    <span class="comment">//使用附加数组将元素排序</span></span><br><span class="line">    T *u = <span class="keyword">new</span> T [n];<span class="comment">//附加数组</span></span><br><span class="line">    <span class="comment">//把a中元素移到u中正确位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        u[r[i]] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把u中元素移回a</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        a[i] = u[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、原地重排</p><p>已经用rank计算出名次，不借助其他空间，将a中的元素按照名次排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">rearrange</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>, <span class="title">int</span> <span class="title">r</span>[])&#123;</span></span><br><span class="line">    <span class="comment">//原地重排</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(r[i] != i)&#123;<span class="comment">//r[i]中是名次</span></span><br><span class="line">            <span class="keyword">int</span> t = r[i];</span><br><span class="line">            swap(a[i], a[t]);</span><br><span class="line">            swap(r[i], r[t]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、插入排序</p><p>从单元数组开始，不断实施插入操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">insert</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></span><br><span class="line">    <span class="comment">//x插入有序数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>； i&gt;=<span class="number">0</span>&amp;&amp;x&lt;a[i]; i--)&#123;</span><br><span class="line">        a[i+<span class="number">1</span>] = a[i];<span class="comment">//大的往后挪</span></span><br><span class="line">    &#125;</span><br><span class="line">    a[i+<span class="number">1</span>] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">insertionSort</span>(<span class="title">T</span> <span class="title">a</span>[], <span class="title">int</span> <span class="title">n</span>)&#123;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">        T t = a[i];</span><br><span class="line">        insert(a, i, t);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、箱子排序</p><p>首先把分数相同的节点放在同一个箱子里，然后把箱子链接起来就得到有序的链表。每一个箱子都是一个链表，一个箱子的节点数目介于0~n之间。开始时所有箱子都是空的，排序：（1）逐个删除输入链表的节点，把删除的节点分配到相应的箱子里；（2）把每一个箱子中的链表手机并链接起来，使其成为一个有序链表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binSort</span><span class="params">(chain&lt;T&gt;&amp; theChain, <span class="keyword">int</span> range)</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    chain&lt;T&gt; *bin;</span><br><span class="line">    bin = <span class="keyword">new</span> chain&lt;T&gt;[range+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//取出分配到箱子里</span></span><br><span class="line">    <span class="keyword">int</span> numberOfElements = theChain.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=nu,berOfElements; i++)&#123;</span><br><span class="line">        T x = theChain.get(<span class="number">0</span>);</span><br><span class="line">        theChain.erase(<span class="number">0</span>);</span><br><span class="line">        bin[x.score].insert(<span class="number">0</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从箱子中手机元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=range; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!bin[j].empty())&#123;</span><br><span class="line">            T x = bin[j].get(<span class="number">0</span>);</span><br><span class="line">            bin[j].erase(<span class="number">0</span>);</span><br><span class="line">            theChain.insert(<span class="number">0</span>,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] bin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、基数排序</p><p>把数按照某种基数分解为数字，然后对数字排序。</p><p>（1）利用箱子排序，根据最低位数字，对10个数进行排序。</p><p>（2）利用箱子排序，对（1）的结果根据次低位排序。….</p><p>8、堆排序  </p><p>先用n个待排序的元素来初始化一个大根堆，然后从堆中逐个提取元素。按非递减排列。初始化O(n)，每次删除O(logn)，总的O(nlogn)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(T a[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    maxHeap&lt;T&gt; heap(<span class="number">1</span>);</span><br><span class="line">    heap.initialize(a, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">1</span>; i--)&#123;</span><br><span class="line">        T x = heap.top();</span><br><span class="line">        heap.pop();</span><br><span class="line">        a[i+<span class="number">1</span>] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    heap.deactivateArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、归并排序</p><p>若n为1，则算法终止；否则，将序列划分为k个子序列。先对每一个子序列排序，然后将有序子序列归并为一个序列。k=2称为merge sort</p><p>首先将每两个相邻的大小为1的子序列归并，然后将每两个相邻的大小为2的子序列归并，。。直到只剩下一个有序序列。轮流地将元素从a到b，从b到a。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(T a[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    T *b = <span class="keyword">new</span> T[n];</span><br><span class="line">    <span class="keyword">int</span> segmentSize = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(segmentSize &lt; n)&#123;</span><br><span class="line">        mergePass(a, b, n, segmentSize);</span><br><span class="line">        segmentSize += segmentSize;</span><br><span class="line">        mergePass(b, a, n, segmentSize);</span><br><span class="line">        segmentSize += segmentSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//仅确定要归并的子序列的左右边界</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergePass</span><span class="params">(T x[], T y[], <span class="keyword">int</span> n, <span class="keyword">int</span> segmentSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= n<span class="number">-2</span>*segmentSize)&#123;</span><br><span class="line">        merge(x, y, i,i+segmentSize<span class="number">-1</span>, i+<span class="number">2</span>*segmentSize<span class="number">-1</span>);</span><br><span class="line">        i = i+<span class="number">2</span>*segmentSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//少于两个满数据段</span></span><br><span class="line">    <span class="keyword">if</span>(i+segmentSize &lt; n)&#123;</span><br><span class="line">        merge(x, y, i, i+segmentSize<span class="number">-1</span>, n<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//1个</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;n; j++)&#123;</span><br><span class="line">            y[j] = x[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(T c[], T d[], <span class="keyword">int</span> startOfFirst, <span class="keyword">int</span> endOfFirst, <span class="keyword">int</span> endOfSecond)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first = startOfFirst;</span><br><span class="line">    <span class="keyword">int</span> second = endOfFirst+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> result = startOfFirst;</span><br><span class="line">    <span class="keyword">while</span>((first&lt;=endOfFirst) &amp;&amp; (second&lt;=endOfSecond))&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[first] &lt;= c[second])</span><br><span class="line">            d[result++] = c[first++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            d[result++] = c[second++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//归并剩余元素</span></span><br><span class="line">    <span class="keyword">if</span>(first &gt; endOfFirst)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> q=second; q&lt;=endOfSecond; q++)</span><br><span class="line">            d[result++] = c[q];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> q=first; q&lt;=endOfFirst; q++)</span><br><span class="line">            d[result++] = c[q];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、快速排序</p><p>把n个元素划分为三段：左段left，中间段middle，右段right。中段仅有一个元素，左段的元素都不大于中间段的元素，右段的元素都不小于中间段的元素，可对左右独立排序，且排序后不用归并。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quichSort</span><span class="params">(T a[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max = indexOfMax(a, n);</span><br><span class="line">    swap(a[n<span class="number">-1</span>], a[max]);</span><br><span class="line">    quickSort(a, <span class="number">0</span>, n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSor</span><span class="params">(T a[], <span class="keyword">int</span> leftEnd, <span class="keyword">int</span> rightEnd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(leftEnd &gt;= rightEnd)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> leftCursor = leftEnd;</span><br><span class="line">    <span class="keyword">int</span> rightCursor = rightEnd+<span class="number">1</span>;</span><br><span class="line">    T pivot = a[leftEnd];</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            leftCursor++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(a[leftCursor] &lt; pivot);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            rightCursor--;</span><br><span class="line">        &#125;<span class="keyword">while</span>(a[rightCursor] &gt; pivot);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(leftCursor &gt;= rightCursor)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a[leftCursor], a[rightCursor]);</span><br><span class="line">    &#125;</span><br><span class="line">    a[leftEnd] = a[rightCursor];</span><br><span class="line">    a[rightCursor] = pivot;</span><br><span class="line">    quickSort(a, leftEnd, rightCursor<span class="number">-1</span>);</span><br><span class="line">    quickSort(a, rightCursor+<span class="number">1</span>， rightEnd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;introduction:&lt;/p&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目录&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;#jump1&quot;&gt;chapter1  C++回顾&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;
      
    
    </summary>
    
    
      <category term="study" scheme="http://yoursite.com/tags/study/"/>
    
      <category term="data structures" scheme="http://yoursite.com/tags/data-structures/"/>
    
  </entry>
  
  <entry>
    <title>Operatring System</title>
    <link href="http://yoursite.com/2018/08/02/Operatring-System/"/>
    <id>http://yoursite.com/2018/08/02/Operatring-System/</id>
    <published>2018-08-02T07:51:03.000Z</published>
    <updated>2018-08-22T13:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近正好复习一下操作系统，总结一下，以后看也方便一点。</p><a id="more"></a><hr><p>Operating System（一段英文介绍，还没写好，先空着）</p><table><thead><tr><th style="text-align:left"><span id="jump0">目录</span></th></tr></thead><tbody><tr><td style="text-align:left"><a href="#jump1">chapter1  导论</a></td></tr><tr><td style="text-align:left"><a href="#jump2">chapter2  操作系统结构</a></td></tr><tr><td style="text-align:left"><a href="#jump3">chapter3  进程</a></td></tr><tr><td style="text-align:left"><a href="#jump4">chapter4  线程</a></td></tr><tr><td style="text-align:left"><a href="#jump5">chapter5  CPU调度</a></td></tr><tr><td style="text-align:left"><a href="#jump6">chapter6  进程同步</a></td></tr><tr><td style="text-align:left"><a href="#jump7">chapter7  死锁</a></td></tr><tr><td style="text-align:left"><a href="#jump8">chapter8  内存管理</a></td></tr><tr><td style="text-align:left"><a href="#jump9">chapter9  虚拟内存</a></td></tr><tr><td style="text-align:left"><a href="#jump10">chapter10  文件系统接口</a></td></tr><tr><td style="text-align:left"><a href="#jump11">chapter11  文件系统实现</a></td></tr><tr><td style="text-align:left"><a href="#jump12">chapter12  大容量存储器的结构</a></td></tr><tr><td style="text-align:left"><a href="#jump13">chapter13  I/O输入系统</a></td></tr><tr><td style="text-align:left"><a href="#jump14">chapter14  保护</a></td></tr></tbody></table><hr><p><span id="jump1">chapter 1  导论</span></p><p>计算机系统大致分为4个部分：计算机硬件、操作系统、系统程序与应用程序、用户。（硬件为系统提供基本的计算资源，应用程序规定了用户按何种方式使用这些资源，操作系统控制和协调用户的应用程序对硬件的使用）</p><p>从用户视角：使用方便 -&gt; 性能 -&gt;资源利用率         ease of use/ performance/ resource utilization</p><p>从系统视角：a resource allocator  、a control program</p><p>定义：资源管理、程序控制、方便用户</p><p><a href="https://www.cnblogs.com/Braveliu/p/3305975.html" target="_blank" rel="noopener">计算机启动过程</a></p><p>中断：硬件可随时通过系统总线向CPU发出信号触发中断，软件通过执行特别操作（系统调用）触发中断。当CPU中断时，它暂停正在做的事转到中断服务程序开始位置的地址，中断服务程序开始执行，执行完后，CPU重新执行被中断的计算。</p><p>存储结构：寄存器 -&gt; 高速缓存 -&gt; 主存 -&gt; 电子磁盘 -&gt; 磁盘 -&gt; 光盘 -&gt; 磁带</p><p>I/O结构：查询，中断，DMA</p><p>单处理器系统：仅用一个处理器来完成系统操作和目标仿真 。</p><p>多处理器系统：增加吞吐量，规模经济，增加可靠性 。非对称多处理（asymmetric multiprocessing）：每个处理器都有各自特定的任务（主从）。对称多处理：每个处理器都要完成操作系统中的所有任务。</p><p>集群系统：将多个CPU集中起来完成计算任务。与多处理器系统不同，由两个或多个独立的系统耦合起来。非对称集群/对称集群</p><p><u>集群：多个计算机耦合成单一系统，耦合度较低，消息通信。</u></p><p><u>多道程序：由多个CPU组成的单一物理试题，共享存储间通信。</u></p><p>多道程序系统：提供了一个可以充分使用各种系统资源的环境。目的是无论何时都有进程在运行，从而使CPU利用率达到最大化。</p><p>分时操作系统：允许许多用户同时共享计算机。目的是在进程之间快速切换CPU以便用户在程序运行时能与其进行交互。</p><p>双重模式：用户模式，监督程序模式/系统模式/特权模式。提供了保护操作系统和用户程序不受错误用户程序影响的手段。将能引起损害的机器指令作为特权指令。</p><p>定时器（timer）：确保操作系统能维持对CPU的控制，也必须防止用户程序陷入死循环或不调用系统服务，并且不将控制权返回到操作系统。</p><p>进程管理：进程是系统工作的单元。系统由多个进程组成，操作系统进程/用户进程。</p><p>内存管理：内存通常是CPU所能直接寻址和访问的唯一大容量存储器。</p><p>存储管理：文件系统管理，大容量存储器管理，高速缓存，I/O系统。</p><p>保护和安全：保护是一种控制进程或用户对计算机系统资源的访问的机制。安全主要是防止系统不受外部或内部攻击。</p><p>分布式系统：将一组物理上分开来的、各种可能异构的计算机系统通过网络连接在一起，为用户提供系统所维护的各种资源的计算机的集合。</p><p>专用系统：实时嵌入系统，多媒体系统，手持系统</p><p>计算环境：传统计算，客户机-服务器计算，对等计算，基于Web的计算。</p><hr><p><span id="jump2">chapter2  操作系统结构</span></p><p>操作系统服务：</p><p><strong>用户有用</strong>（1）用户界面：命令行界面，批界面。最常用的是图形用户界面。（2）程序执行：系统必须能将程序装入内存并运行程序。（3）I/O操作：为了提高效率和进行保护，用户通常不能直接进行控制I/O设备，因此OS必须提供进行I/O操作的方法。（4）文件系统操作。（5）通信：发生在同一台计算机运行的两个进程之间，运行在由网络连接起来的不同的计算机上的进程之间。实现：共享内存，消息交换。（6）错误检测：OS需要知道可能出现的错误。</p><p><strong>系统高效运行</strong>（1）资源分配：多个用户/多个作业运行时。（2）统计：记录哪些用户使用了多少和什么资源。（3）保护和安全。</p><p>用户界面：（1）命令解释程序：shell，获取并执行用户指定的下一条指令。执行方法：命令解释程序本身包含代码以执行这些命令，由系统程序实现绝大多数命令。（2）图形用户界面：GUI，提供基于鼠标的窗口和菜单系统作为接口。</p><p>系统调用：system call，提供了OS提供的有效服务界面。一般使用API。传递参数的三种方法：（1）寄存器，简单。（2）寄存器传递参数块的首地址，参数通常存在内存的块和表中，并将块的地址通过寄存器来传递。（3）参数可通过程序放在或压入堆栈中，并通过OS弹出。</p><p>系统调用类型：（1）进程控制。（2）文件管理。（3）设备管理。（4）信息维护。（5）通信，消息传递模型（通信进程通过彼此之间交换消息来交换信息，直接或间接地通过一个共同的邮箱，在通信前必须先打开连接，必须知道另一个通信试题的名称）和共享内存模型（进程使用shared memory create和shared memory attach系统调用来获得其他进程所拥有的内存区域的访问权）。</p><p>系统程序：文件管理，状态信息，文件修改，程序语言支持，程序装入和执行，通信。</p><p>OS设计目标：首要问题是定义系统的目标和规格，用户目标和系统目标。</p><p>机制和策略：机制决定如何做（方法），策略决定做什么（目的）。</p><p>OS结构：简单结构，分层（自定向下，每层只能利用较低层的功能和服务），微内核（将所有非基本部分从内核中移走，使客户程序和运行在用户空间的各种服务之间进行通信，利于扩充OS），模块（比分层更灵活，任一模块能调用任何其他模块，不需要调用消息传递来通信）。</p><p>虚拟机：在并行运行几个不同的执行环境时能够共享相同的硬件。每个虚拟机完全独立于其他虚拟机，因此没有安全问题，但同时也没有直接资源共享。优点：可通过共享小型磁盘来共享文件，可通过定义一个虚拟机的网络来传递消息。</p><p>系统启动：之前1中有个链接。引导程序存储在固件总，OS保存在磁盘上。</p><p><u>并行：多个CPU多个程序；并发：一个CPU多个程序。</u></p><hr><p><span id="jump3">chapter3  进程</span></p><p><u>作业：用户在一次解题或一个事物处理过程中要求计算机系统所做工作的集合。它包括用户程序、所需要的数据及控制命令等。作业是由一系列有序的步骤组成的。</u></p><p><u>进程：一个程序在一个数据集合上的一次运行过程。</u></p><p><u>线程：线程是进程中的一个实体，是被系统独立调度和执行的基本单位。</u></p><p><u>管程：管程实际上是定义了一个数据结构和在该数据结构上的能为并发进程所执行的一组操作，这组操作能同步进程和改变管程中的数据。</u></p><p><u>进程间的通信：信号、信号量、消息队列、共享内存。</u></p><p>进程：包括程序代码/文本段、当前活动，堆栈段、数据段、堆..。程序本身不是进程。程序是被动实体，进程是活动实体。有一个程序计数器用来表示一个要执行的命令和相关资源集合。两个进程可与同一程序相关，但被当做两个独立的执行序列。</p><p>进程状态：（1）新的，进程正在被创建。（2）运行，指令正在被执行。（3）等待，进程等待某个时间的发生。（4）就绪，进程等待分配处理器。（5）终止，进程完成执行。一次只有一个进程可在一个处理器上运行，但是多个进程可处于就绪或等待状态。</p><p><img src="/uploads/os1.jpg" alt=""></p><p>进程控制块：PCB。进程状态，程序计数器（下个指令的地址），CPU寄存器，CPU调度信息，内存管理信息，记账信息，I/O状态信息。</p><p><img src="/uploads/os2.jpg" alt=""></p><p>调度程序：（1）长期调度程序/作业调度程序：从缓冲池中选择进程，并装入内存以准备执行。（2）短期调度程序/CPU调度程序：从准备执行的进程中选择进程，并并为之分配CPU。主要差别为执行的频率，（1）低。</p><p>中期调度程序：将进程从内存中移出，从而降低多道程序设计的程度。之后，进程能被重新调入内存，并从中断处继续执行。（交换）</p><p>上下文切换：将CPU切换到另一个进程需要保存当前进程的状态并恢复另一个进程的状态。PCB</p><p>进程创建：进程在其执行过程中，能通过创建进程系统调用创建多个新进程，创建进程称为父进程，而新进程称为子进程。进程标识符PID。</p><p>创建新进程时：①父进程与子进程并发执行 ②父进程等待，直到某个或全部子进程执行完。新进程的地址空间：①子进程是父进程的复制品 ②子进程装入另一个新程序。</p><p>fork()：子进程返回0，父进程返回子进程PID。exec()。wait()。进程终止：exit()。</p><p>进程间通信：（1）共享内存：建立起一块供协作进程共享的内存区域，进程通过向此共享区域读或写入数据来交换信息。速度快。（2）消息传递：通过协作进程间交换消息来实现通信。交换较少数量的数据。易于实现。（直接通信/间接通信，同步(阻塞)/异步(非阻塞)，0缓冲/有限缓冲/无线缓冲）</p><p>客户机-服务系统通信：（1）socket：通信的端点。（2）远程过程调用RPC。（3）Java的远程方法调用RMI。</p><hr><p><span id="jump4">chapter4  线程</span></p><p>线程：CPU使用的基本单元，由线程ID，程序计数器，寄存器集合和栈组成。共享代码段、数据段、其他资源，寄存器和栈不共享。</p><p>多线程编程优点：响应度高，资源共享，经济，多处理器体系结构的利用。</p><p>多线程模型：（1）多对一，许多用户级线程映射到一个内核线程，一个线程阻塞则整个阻塞，任一时刻只有一个线程能访问内核。（2）一对一，每个用户线程映射到一个内核线程，允许多个线程并行运行在多处理器系统上，一个用户线程就需要创建一个相应的内核线程从而限制了系统所支持的线程数量。（3）多对多，多路复用了许多用户线程到同样数量或更小数据量的内核线程上，可以创建任意多的用户线程，并且相应内核线程能在多处理器系统上并发执行，当一个线程阻塞内核能调度另一个线程来执行。</p><p>线程库：为程序员提供创建和管理线程的API。（1）在用户空间提供一个没有内核支持的库，本地函数调用。（2）执行一个由OS直接支持的内核级的库。</p><p>（1）fork()之后立即调用exec()，没必要复制所有线程。（2）fork()之后另一进程不调用exec()，另一进程应复制所有线程。</p><p>线程取消：在线程完成之前来终止线程的任务。（1）异步取消：一个线程立即终止目标线程。（2）目标线程不断地检查它是否应终止，这允许目标线程有机会以有序方式来终止自己。</p><p>信号：用来通知进程某个特定事件已经发生了。（1）信号是由特定事件的发生所产生的。（2）产生的信号要发送到进程。（3）一旦发送，信号必须加以处理。</p><p>线程池：在进程开始时创建一定数量的线程，并放入到池中以等待工作。当服务器收到请求时，它会唤醒池中的一个线程，并将要处理的请求传递给它。一旦线程完成了服务，它会返回到池中再等待工作。如果池中没有可用的线程，那么服务器会一直等待知道有空线程为止。优点：①通常用现有线程处理请求要比等待创建新的线程要快。②线程池限制了在任何时候可用线程的数量。</p><hr><p><span id="jump5">chapter5  CPU调度</span></p><p>进程执行由CPU执行和I/O等待周期组成。进程在这两个状态之间切换。</p><p>CPU调度程序：4种环境：①当一个进程从运行状态切换到等待状态。非抢占。②当一个进程从运行状态切换到就绪状态。③当一个进程从等待状态切换到就绪状态。④当一个进程终止时。非抢占。采用非抢占调度，一旦CPU分配给一个进程，那么该进程会一直使用CPU直到进程终止或切换到等待状态。</p><p>分派程序：一个模块，用来将CPU的控制交给由短期调度程序选择的进程。功能：切换上下文，切换到用户模式，跳转到用户程序合适位置以重新启动程序。</p><p>调度准则：CPU使用率（使CPU尽可能忙），吞吐量（测量工作量），周转时间（从进程提交到进程完成的时间段），等待时间（在就绪队列中等待所花费时间之和），响应时间（从提交请求到产生第一响应的时间）。需要使CPU使用率和吞吐量最大化，而使周转时间、等待时间和响应时间最小化。</p><p>调度算法：<strong>（1）</strong>先到先服务 FCFS，先请求CPU的进程先分配到CPU。FIFO队列。非抢占。<strong>（2）</strong>最短作业有限调度 SJF，当CPU空闲时，会赋给具有最短CPU区间的进程，同样长度FCFS。平均等待时间最小。用于长期调度。抢占/非抢占。抢占SJF/最短剩余时间优先调度。<strong>（3）</strong>优先级调度，每个进程都有一个优先级与其关联，具有最高优先级的进程会分配到CPU，具有相同优先级FCFS。抢占/非抢占。无穷阻塞/饥饿，老化（逐渐增加在系统中等待很长时间的进程的优先级）。<strong>（4）</strong>轮转法调度，专门为分时系统设计，类似FCFS，增加了抢占。时间片（一个较小时间单元），循环队列，FIFO，可抢占。<strong>（5）</strong>多级队列调度，将就绪队列分成多个独立队列，根据进程的属性，一个进程被永久地分配到一个队列，每个队列有自己的调度算法。队列之间通常采用固定优先级抢占调度/划分时间片。<strong>（6）</strong>多级反馈队列调度，根据不同CPU区间的特点以区分进程，如果进程使用过多CPU时间，那么它会被转移到更低优先级队列。将I/O约束和交互进程留在更高优先级队列，在较低优先级队列中等待时间过长的进程会被转移到更高优先级队列。（队列0中的1个时间片，未完成放到队列1尾部）。</p><p>线程调度：进程竞争范围 PCS，系统竞争范围 SCS。</p><p>算法评估：（1）分析评估法。使用给定算法和系统负荷，产生一个公式或数字，以评估对于该负荷算法的性能。（2）确定模型法。采用特殊预先确定的负荷，计算在给定负荷下每个算法的性能。</p><hr><p><span id="jump6">chapter6  进程同步</span></p><p>临界区问题：critical-section problem，设计一个以便进程协作的协议。进入区：entry section，实现进程请求允许进入临界区的代码。退出区：exit section。剩余区：remainder sction。</p><p>解答的三个要求：（1）互斥：mutual exclusion，如果进程Pi在其临界区内执行，那么其他进程都不能在其临界区内执行。（2）前进：progress，如果没有进程在其临界区内执行且有进程需进入临界区，那么只有那些不在剩余区内执行的进程可参加选择，以确定谁能下一个进入临界区，且这种选择不能无限推迟。（3）有限等待：bounded waiting，从一个进程作出进入临界区的请求，直到该请求允许为止，其他进程允许进入其临界区的次数有上限。</p><p>典型进程Pi的通用结构：do{<u>进入区</u>   临界区   <u>退出区</u>   剩余区}while(TRUE);</p><p>两种方法：（1）抢占内核：preemptive kernel。适合实时编程，响应快。（2）非抢占内湖：nonpreemptive kernel。</p><p>Peterson算法：一个经典的基于软件的临界区问题的解答。适用于两个进程在临界区与剩余区间交替执行。（Pi，Pj，j=1-i）共享两个数据项：int turn;表示哪个进程可以进入临界区。boolean flag[2];表示哪个进程想要进入临界区。</p><p><img src="D:/github+hexo/hexo/source/_posts/uploads/os3.jpg" alt=""></p><p>锁：通过要求临界区用锁来防护，就可以避免竞争条件。</p><p>单处理器：修改共享变量时禁止中断。</p><p>多处理器：原子。TestAndSet() &amp; Swap()。</p><p><img src="D:/github+hexo/hexo/source/_posts/uploads/os4.jpg" alt=""></p><p>信号量：semaphore，信号量S，整数变量，两个标准原子操作 wait() &amp; signal()。</p><p><img src="D:/github+hexo/hexo/source/_posts/uploads/os5.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">    waiting(mutex);</span><br><span class="line">    //critical section</span><br><span class="line">    signal(mutex);</span><br><span class="line">    //remainder section</span><br><span class="line">&#125;while(TRUE);</span><br></pre></td></tr></table></figure><p>计数信号量：可用来控制访问具有若干个实例的某种资源。</p><p>二进制信号量：互斥锁，值为0或1。</p><p>忙等待，自旋锁：当一个进程位于其临界区内时，任何其他试图进入其临界区的进程都必须在其进入代码中连续地循环。（解决就是block() &amp; wakeup()，S&lt;0加入队列里阻塞，signal()唤醒）</p><p>死锁：deadlocked，两个或多个进程无限地等待一个时间，而该事件只能由这些等待进程之一来产生。</p><p>饥饿/无限期阻塞：starvation/indefinite blocing，进程在信号量内无限期等待。</p><p>有限缓冲问题：n个缓冲项；信号量mutex互斥，初始化为1；信号量empty，初始化为n；信号量full，初始化为0。</p><p>读者-写者问题：要求写者对共享数据库有排他的访问。</p><p>哲学家进餐问题：思考和吃饭，一边一只筷子。</p><p>管程：monitor，管程结构确保一次只有一个进程能在管程内活动。</p><p>原子事务：要么完全执行，要么什么也不做。</p><p>事务：transaction，执行单个逻辑功能的一组指令或操作。</p><p>提交：committed，已成功完成执行的终止事务。否则，称为撤销aborted。回退 rolled back。</p><p>调度：执行顺序。串行调度：每个事务原子地执行的调度。非串行调度：允许两个事务重叠执行。冲突可串行化：如果调度S通过一系列非冲突操作的交换而转换成串行调度S’，则调度S为冲突可串行化的。冲突操作：读写，写读，写写？</p><p>加锁协议：（1）共享，可读，不能修改。（2）排他，可读可写。</p><p>两端加锁协议：（1）增长阶段，事务可获取锁，但不能释放锁。（2）收缩阶段，事务科释放锁，但不能获取新锁。</p><p>时间戳：对于系统内的每个事务Ti，都为之关联一个唯一固定的时间戳，并记为TS(Ti)。</p><p>（具体的是在数据库里学的）</p><hr><p><span id="jump7">chapter7  死锁</span></p><p>死锁：deadlocked，两个或多个进程无限地等待一个时间，而该事件只能由这些等待进程之一来产生。/  某个进程申请资源，如果这时资源不可用，那么该进程进入等待状态，如果所申请的资源被其他等待进程占有，那么该等待进程有可能再也无法改变其状态。</p><p>正常操作模式：①申请，如果申请不能立即被允许，那么申请进程必须等待，直到它获得资源为止。②使用，进程对资源进行操作。③释放，进程释放资源。</p><p>死锁的必要条件：<strong>①互斥。</strong>至少有一个资源必须处于非共享模式，即一次只有一个进程使用。如果另一个进程申请该资源，那么申请进程必须等到该原被释放为止。<strong>②占有并等待。</strong>一个进程必须占有至少一个资源，并等待另一资源，而该资源为其他进程所占有。<strong>③非抢占。</strong>资源不能被抢占，即资源只能在进程完成任务后自动释放。<strong>④循环等待。</strong>有一组等待进程{P0,P1,..,Pn}，P0等待的资源为P1所占有，..，Pn等待的资源为P1所占有。<strong>所有4个条件同时满足才会出现死锁。</strong>条件并不完全独立。</p><p>资源分配图：如果分配图没有环，那么系统就没有进程死锁。如果分配图有环，那么可能存在死锁。如果每个资源类型刚好有一个实例，那么有环就以为这已经出现死锁。如果环涉及一组资源类型，而每个类型只有一个实例，那么就出现死锁。</p><p><img src="D:/github+hexo/hexo/source/_posts/uploads/os6.jpg" alt=""></p><p>处理死锁：（1）可使用协议以预防或避免死锁，确保系统不会进入死锁状态。（2）可允许系统进入死锁状态，然后检测它，并加以恢复。（3）可忽视这个问题，认为死锁不可能在系统内发生。</p><p>死锁预防：deadlock revention，是一组方法，以确保至少一个必要条件不成立。</p><p>死锁避免：deadlock avoidance，要求操作系统事先得到有关进程申请资源和使用资源的额外信息。有了额外信息，系统可确定，对于一个申请，进程是否应等待。</p><p>如果不采用死锁预防和避免，系统可提供一个算法来检查系统状态以确定死锁是否发生，并提供另一个算法来从死锁恢复。</p><p>死锁预防：（1）互斥。非共享资源要有互斥条件。通常不能通过否定互斥条件来预防死锁，有的资源本身就是非共享的。（2）占有并等待。当一个进程申请一个资源时，它不能占有其他资源。①每个进程在执行前申请并获得所有资源。②允许进程在没有资源时才可申请资源。两种方法资源利用率低，可能发生饥饿。（3）非抢占。如果一个进程占有资源并申请另一个不能立即分配的资源，那么其现已分配的资源都可被抢占。（4）循环等待。对所有资源类型进行完全排序，且要求每个进程按递增顺序来申请资源。（低设备使用率，低系统吞吐率）</p><p>死锁避免：获得以后如何申请资源的附加信息。（1）安全状态。如果存在一个安全序列，那么系统处于安全状态。进程顺序&lt;P1,P2,..,Pn&gt;，如果对于每个Pi，Pi仍然可以申请的资源数小于当前可用资源加上所有进程Pj(j&lt;i)所占有的资源，则为安全序列。安全状态不是死锁状态，死锁状态是不安全状态。（2）资源分配图算法。引入需求边，虚线表示。检测环。（3）银行家算法。系统进程个数n，资源类型的种类m，Available[j]=k资源类型Rj现有k个实例，Max ij=k进程Pi最多可申请k个资源类型Rj的实例，Allocation ij=k进程Pi现在已分配了k个资源类型Rj的实例，Need ij=k进程Pi还可能申请k个资源类型Rj的实例。</p><p>死锁检测：（1）每种资源类型只有单个实例。等待图，从资源分配图中，删除所有资源类型节点，合并适当边，就可以得到等待图。当且仅当等大图中有一个环，系统中存在死锁。（2）每种资源类型可有多个实例。与银行家算法类似。Available，Allocation，Request。</p><p>死锁恢复：（1）进程终止。终止所有死锁进程，一次只终止一个进程直到取消死锁循环为止。（2）资源抢占。（选择一个牺牲品，回滚，饥饿）</p><hr><p><span id="jump8">chapter8  内存管理</span></p><p>CPU能直接访问的存储器：内存，处理器内的寄存器。</p><p>地址绑定：（1）编译时，绝对代码。（2）加载时，可重定位代码。（3）执行时。</p><p>逻辑地址：CPU所生成的地址。物理地址：内存单元所看到的地址。</p><p>运行时从虚拟地址到物理地址的映射是由被称为内存管理单元MMU的硬件设备来完成的。</p><p>进程可以暂时从内存中交换到备份存储上，当需要再次执行时再调回到内存中。一个交换出的进程需要交换回它原来所占有的内存空间。（1）如果绑定是在汇编时或加载时所定的，那么就不可以移动到不同的位置。（2）如果绑定在运行时才确定，由于物理地址是在运行时才确定的，那么进程可以移到不同的地址空间。交换需要备份存储，通常是快速磁盘。</p><p>内存映射：重定位寄存器含有最小的物理地址值，界限地址寄存器含有逻辑地址的范围值。</p><p>内存分配：分区，最简单，将内存分为多个固定大小的分区，每个分区只能容纳一个进程。</p><p>可变分区。操作系统有一个表，用于记录哪些内存可用和哪些内存已被占用。孔hole，一大块可用内存。找足够大的孔，孔内未分配的内存可以下次使用。新进程需要内存时，查找足够大的孔，如果孔太大则分为两块，一块给新进程，另一块还给孔。进程终止时释放内存还给孔集合。如果新孔和其他孔相邻，则合并。选孔：①首次适应，分配第一个足够大的孔。②最佳适应，分配最小的足够大的孔。③最差适应，分配最大的孔。</p><p>外部碎片问题，首次适应和最佳适应都有。50%规则，假定有N个可分配块，那么可能有0.5N个块为外部碎片。</p><p>内部碎片问题，内存按固定大小分配，在分区内，但不能使用。</p><p>解决外部碎片的问题：（1）紧缩，移动内存内容，以便使所有空闲空间合并成一整块。如果重定位是静态的，并且在汇编时或装入时进行的，那么就不能紧缩。（2）允许物理地址空间为非连续。</p><p>分页：允许进程的物理地址空间可以是非连续的。基本方法：将物理内存分为固定大小的块（帧）。将逻辑内存分为同样大小的块（页）。由CPU生成的每个地址分为两个部分：页号p和页偏移d。页表包含每页所在物理内存的基地址。采用分页技术不会产生外部碎片，会有内部碎片。</p><p>页表的硬件实现：一组专用寄存器，转换表缓冲区TLB。TLB只包括页表的一小部分条目，当CPU产生逻辑地址后，其页号交给TLB，如果找到…，如果不在TLB中，就需要访问页表…。</p><p>分页下的内存保护：通过与每个帧相关联的保护胃来实现。一个位定义可读写还是只读。</p><p>如果代码是可重入代码，则可以共享。不能自我修改的代码。</p><p>层次页表：外页表-&gt;页表-&gt;内存</p><p>哈希页表：以虚拟页码作为哈希值，每个元素三个域，虚拟页码、所映射的帧号、指向链表中下一个元素的指针。虚拟地址中的虚拟页号转换到哈希表中，用虚拟页号与链表中的下一个元素的第一个域相比，如果皮诶，那么相应的帧号就用来形成物理地址，如果不匹配，就对下一个节点进行比较。</p><p>反向页表：△</p><p>分段：支持用户视角的内存管理方案。逻辑地址空间是由一组段组成的，每个段都有名称和长度，地址指定了段名称和段内偏移。段表：段基地址，段界限。逻辑地址：段号，段内偏移。</p><hr><p><span id="jump9">chapter9  虚拟内存</span></p><p>虚拟内存：将用户逻辑内存与物理内存分开。</p><p>按需调页：在需要时才调入相应的页。懒惰交换：只有在需要页时，才将它调入内存。交换程序对整个进程进行操作，调页程序只对进程的单个页进行操作。</p><p>写时复制：如果任何一个进程需要对页进行写操作，那么就创建一个共享页的副本。</p><p>基本页置换：如果没有空闲帧，就查找当前没有使用的帧，并将其释放（将其内容写到交换空间，并改变页表以表示该页不在内存中）。①查找所需页在磁盘上的位置。②查找一个空闲帧。a.如果有空闲帧，就使用它。b.如果没有空闲帧，就使用页置换算法以选择一个牺牲帧。c.将牺牲帧的内容写到磁盘上，改变页表和帧表。③将所需页读入空闲帧，改变页表和帧表。④重启用户进程。</p><p>可以通过修改位或脏位以降低额外开销。如果修改位没有设置，那么就知道自从磁盘读入后该页没有发生修改，磁盘上页的副本的内容没有必要重写。</p><p>FIFO置换：为每个页记录着该页调入内存的时间。当必须置换一页时，将选择最旧的页。</p><p>Belady异常：对有的页置换算法，页错误率可能会随着所分配的帧数的增加而增加，而原期望为进程增加内存会改善其性能。</p><p>最优置换：置换最长时间不会使用的页。无Belady异常。</p><p>LRU算法：最近最少使用，选择最长时间没有使用的页。（计数器，栈）无Belady异常。</p><p>近似LRU页置换：引用位，（1）附加引用位，（2）二次机会算法，FIFO，检查引用位，0直接置换，1给第二次机会。（3）增强型二次机会算法，引用位和修改位，(0,0)最近没有使用且没有修改，(0,1)最近没有使用但修改过，(1,0)最近使用过但没被修改，(1,1)最近使用过且被修改过。</p><p>基于计数的：最不经常使用，最常使用。</p><p>页缓冲：维护一个已修改页的列表，每当调页设备空闲时，就选择一个修改页并写到磁盘上，接着重新设置其修改位；保留一个空闲帧池，但要记住哪些页在哪些帧中。</p><p>帧分配：全局置换，允许一个进程从所有帧集合中选择一个置换帧；局部置换，每个进程仅从其自己的分配帧中进行选择。</p><p>系统颠簸：thrashing，频繁的页调度。</p><p>预调页：同时将所需要的所有页一起调入到内存中。</p><hr><p><span id="jump10">chapter10  文件系统接口</span></p><p>文件：记录在外存上的相关信息的具有名称的集合。是逻辑外村的最小分配单元。</p><p>顺序访问：</p><p>直接访问/相对访问：文件由固定长度的逻辑记录组成，以允许程序按任意顺序进行快速读和写。</p><p>存储结构：分区（目录，文件）</p><p>单层结构目录：所有文件包含在同一目录中，便于理解和支持。必须具有唯一名名称。</p><p>双层结构目录：主文件目录，用户文件目录。</p><p>树状结构目录：绝对路径名：从根开始并给出路径上目录名直到所指定的文件；相对路径名：从当前目录开始定义路径。禁止共享文件和目录。</p><p>无环图目录：允许目录含有共享子目录和文件，同一文件或子目录可出现在两个不同目录中，无环图是树状结构目录方案的扩展。</p><p>通用图目录：</p><hr><p><span id="jump11">chapter11 文件系统实现</span></p><p>应用程序-&gt; 逻辑文件系统-&gt;  文件组织系统-&gt; 基本文件系统-&gt; I/O控制-&gt; 设备</p><p>文件组织模块知道文件及其逻辑块和物理块。可以将逻辑块地址转换成基本文件系统所用的物理块地址。</p><p>文件系统实现包括三个主要层次：（1）文件系统接口，open() read() write() close()调用以及文件描述符。（2）虚拟文件系统层，VFS：定义一个清晰的VFS接口，以将文件系统的通用操作和具体实现分开。提供了在网络上唯一标识一个文件的机制。（3）实现文件系统类型或远程文件系统协议。</p><p>目录实现：（1）线性列表：使用存储文件名和数据块指针的线性列表。（2）哈希表：根据文件名得到一个值，并返回一个纸箱线性列表中元素的指针。</p><p>主要磁盘空间分配方法：（1）连续，要求每个文件在磁盘上占有一组连续的块，用于访问连续分配文件所需要的寻道数最小，在确实需要寻道时所需要的寻道时间最小；支持顺序访问和直接访问。（2）链接。解决了连续分配的所有问题，采用链接分配，每个文件是磁盘块的链表，磁盘块分布在磁盘的任何地方。目录包括文件第一块的指针和最后一块的指针。只要有空闲块，文件就可以增大，无需合并磁盘空间。缺点：只能有效地用于文件的顺序访问，指针需要空间（将多个块组成簇，增加内部碎片），可靠性低。文件分配表FAT，每个卷开始部分用于存储FAT。（3）索引。通过把所有指针放在一起，通过索引块解决了这个问题。没有外部碎片问题。</p><p>空闲空间管理：（1）位向量（2）链表（3）组（4）计数</p><p>效率：取决于所使用的磁盘分配和目录管理算法。</p><p>恢复：一致性检查程序，备份和恢复</p><hr><p><span id="jump12">chapter12  大容量存储器的结构</span></p><p>磁盘：磁头，磁臂，磁道，扇区，柱面。</p><p>磁盘速度：传输速率（在驱动器和计算机之间的数据传输速率）+定位时间/随机访问时间（寻道时间(移动磁臂到所要的柱面所需时间)+旋转等待时间(等待所要的扇区旋转到磁臂下所需时间)）</p><p>磁头碰撞：虽然磁盘片上涂了一层薄的保护层，但是磁头还是可能损坏磁盘表面。</p><p>磁带：主要用于备份，速度慢，存储长久。</p><p>现代磁盘驱动器：一个一维的逻辑块的数组，逻辑块是最小的传输单位。按顺序映射到磁盘的扇区，先按磁道内扇区顺序，再按柱面内磁道顺序，最后按从外到内的柱面顺序来排序。</p><p>磁盘存储：（1）I/O端口或主机附属存储。（2）分布式文件系统的远程主机/网络附属存储。缺点：存储I/O操作需要使用数据网络的带宽，因此增加了网络通信延迟。</p><p>磁盘调度：（1）FCFS，先来先服务。（2）SSTF，最短寻道时间优先，在将磁头一道远处以处理其他请求之前，先处理靠近当前磁头位置的请求。（3）SCAN，电梯算法，磁臂从磁盘的一端向另一端移动，同时当磁头移过每个柱面时，处理位于该柱面上的服务请求。当到达另一端时，磁头改变移动方向，处理继续。（4）C-SCAN，提供一个更为均匀的等待时间，将磁头从磁盘一端移到磁盘的另一端，随着移动不断地处理请求。不过当磁头移到另一端时，它会马上返回到磁盘的开始，返回时不处理请求。（5）LOOK，磁头只移动到一个方向上最远的请求为止。C-LOOK</p><p>RAID：</p><p><img src="D:/github+hexo/hexo/source/_posts/uploads/os7.jpg" alt=""></p><p><img src="D:/github+hexo/hexo/source/_posts/uploads/os8.jpg" alt=""></p><hr><p><span id="jump13">chapter13  I/O输入系统</span></p><p>总线：一组线和一组严格定义的可以描述在线上传输信息的协议。</p><p>控制器：用于操作端口、总线或设备的一组电子器件。</p><p>轮询，中断，直接内存访问，</p><p>缓冲区：用来保存两个设备之间或在设备和应用程序之间所传输数据的内存区域。（速度差异，协调传输数据大小不一致，支持应用程序I/O的复制语义）</p><p>假脱机：Spooling，用来保存设备输出的缓冲区。</p><hr><p><span id="jump14">chapter14  保护</span></p><p>最小特权原则。</p><p>访问矩阵</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近正好复习一下操作系统，总结一下，以后看也方便一点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://yoursite.com/tags/study/"/>
    
      <category term="operating system" scheme="http://yoursite.com/tags/operating-system/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode]1  Two Sum/两数之和</title>
    <link href="http://yoursite.com/2018/08/02/LeetCode-1-Two-Sum-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2018/08/02/LeetCode-1-Two-Sum-两数之和/</id>
    <published>2018-08-02T02:12:58.000Z</published>
    <updated>2018-08-06T12:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>写在最前面：</p><p>最近开始刷LeetCode上的题目了，做个记录吧，希望刷完之后自己的代码水平能有所提升。</p><p>之前都是习惯用JAVA写，但是C++也要练，同时还要注意时间复杂度，之前都没有做好。</p><a id="more"></a><hr><p>Two Sum</p><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p><p>两数之和</p><p>给定一个整数数组和一个目标值，找出数组中和为目标值的<strong>两个</strong>数。</p><p>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p>对于这个题目，首先想到的是暴力搜索，但是时间复杂度很高，为O(n^2) 。</p><p>另一个想法是，遍历一个数字，用目标去减得到另一个数字，查找这个数字是否存在。其中需要解决的是：1、查找，采用HashMap将数与位置映射起来（HashMap是常数级的查找效率 ） 2、重复，需要记录位置信息，两个不能一样。</p><p>java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; m = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();<span class="comment">//映射</span></span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];<span class="comment">//存放结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">        m.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (m.containsKey(t) &amp;&amp; m.get(t) != i) &#123;</span><br><span class="line">            res[<span class="number">0</span>] = i;</span><br><span class="line">            res[<span class="number">1</span>] = m.get(t);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（感觉这个映射，Integer，如果值相同，只能记录一个位置，最后的）</p><p>C++：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">        m[nums[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (m.count(t) &amp;&amp; m[t] != i) &#123;</span><br><span class="line">            res.push_back(i);</span><br><span class="line">            res.push_back(m[t]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++用得不是很熟，hashmap不大会，还有vector用得也不多，希望多写写熟练一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在最前面：&lt;/p&gt;
&lt;p&gt;最近开始刷LeetCode上的题目了，做个记录吧，希望刷完之后自己的代码水平能有所提升。&lt;/p&gt;
&lt;p&gt;之前都是习惯用JAVA写，但是C++也要练，同时还要注意时间复杂度，之前都没有做好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://yoursite.com/tags/study/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://yoursite.com/2018/08/02/%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2018/08/02/随笔/</id>
    <published>2018-08-02T01:43:38.000Z</published>
    <updated>2018-08-06T12:33:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近很忙也很累，是我有史以来最忙的一个暑假了，但是想想就觉得自己在大一大二的时候浪费了很多时间，光顾着玩去了，-_-||</p><p>等忙结束了，想着把大数据最后一个实验（推荐系统）完善一下，做点记录，逼自己开个坑，一定要完成，不能偷懒，以前的话，总是想做什么，嗯，当时很想，结果后来就想着算了吧</p><p>深感自己的各方面不足，思维模式还是停留在很久以前，写代码方面实在是太弱了</p><p>追 101 的时候遇到了一位七家的大佬，做的数据对比的网站，实在是羡慕</p><p><a href="https://101.tuimeizi.cn/" target="_blank" rel="noopener">https://101.tuimeizi.cn/</a></p><p><a href="https://data.laimeiyun.cn/#/" target="_blank" rel="noopener">https://data.laimeiyun.cn/#/</a></p><p>也算是燃起了我的斗志吧</p><p>暂时先写这么多了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近很忙也很累，是我有史以来最忙的一个暑假了，但是想想就觉得自己在大一大二的时候浪费了很多时间，光顾着玩去了，-_-||&lt;/p&gt;
&lt;p&gt;等忙结束了，想着把大数据最后一个实验（推荐系统）完善一下，做点记录，逼自己开个坑，一定要完成，不能偷懒，以前的话，总是想做什么，嗯，当时很
      
    
    </summary>
    
    
      <category term="7788" scheme="http://yoursite.com/tags/7788/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop-k_means算法的并行化&amp;非并行化实现</title>
    <link href="http://yoursite.com/2018/06/09/Hadoop-k-means%E7%AE%97%E6%B3%95%E7%9A%84%E5%B9%B6%E8%A1%8C%E5%8C%96-%E9%9D%9E%E5%B9%B6%E8%A1%8C%E5%8C%96%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/06/09/Hadoop-k-means算法的并行化-非并行化实现/</id>
    <published>2018-06-09T02:17:21.000Z</published>
    <updated>2018-06-09T03:12:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>实 验 内 容</strong></p><blockquote><p>自 行 准 备 数 据 集 ， 设 计 一 个 数 据 挖 掘 算 法 （ 聚 类 、 分 类 、 频 繁 项 集 挖 掘 或 其 他主 题 ） 对 数 据 集 进 行 信 息 提 取 ， 要 求 分 别 使 用 并 行 化 和 非 并 行 化 的 方 式 实 现 该 算法 。</p></blockquote><p> <strong>实 验 要 求</strong></p><blockquote><p>自 行 对 比 并 行 化 和 非 并 行 化 实 现 方 法 的 数 据 挖 掘 结 果 ， 两 种 结 果 需 完 全 一致 。</p></blockquote><p>有用的参考链接：</p><p><a href="http://archive.ics.uci.edu/ml/index.php" target="_blank" rel="noopener">UCI数据集</a></p><p><a href="https://www.cnblogs.com/chaoku/p/3748456.html" target="_blank" rel="noopener">MapReduce Kmeans聚类算法</a></p><p><a href="https://blog.csdn.net/zhang___yong/article/details/79053623" target="_blank" rel="noopener">（java）K-means算法</a></p><hr><a id="more"></a><p>我选择实现的是k_means聚类算法。</p><p>首先是数据集，我用的是UCI的wine.data，可以点击查看数据集的信息，右键目标另存为直接down下来。</p><p><img src="/uploads/kmeans.png" alt=""></p><p><img src="/uploads/kmeans2.png" alt=""></p><p><strong>k_means算法的思想：</strong></p><blockquote><p>1）从N个文档随机选取K个文档作为质心</p><p>2）对剩余的每个文档测量其到每个质心的距离，并把它归到最近的质心的类。距离采用标准化欧式距离公式计算。</p><p>3）重新计算已经得到的各个类的质心</p><p>4）迭代2～3步直至新的质心与原质心相等或小于指定阈值，算法结束</p></blockquote><p><img src="/uploads/kmeans3.png" alt=""></p><p><img src="/uploads/kmeans4.png" alt=""></p><p><img src="/uploads/kmeans5.png" alt=""></p><p><img src="/uploads/kmeans6.png" alt=""></p><p><img src="/uploads/kmeans7.png" alt=""></p><hr><h4 id="并行化实现"><a href="#并行化实现" class="headerlink" title="并行化实现"></a>并行化实现</h4><p><img src="/uploads/kmeans8.png" alt=""></p><p><img src="/uploads/kmeans9.png" alt=""></p><p><img src="/uploads/kmeans10.png" alt=""></p><p>combiner可以省略，直接reduce。</p><p><img src="/uploads/kmeans11.png" alt=""></p><p><img src="/uploads/kmeans12.png" alt=""></p><hr><h4 id="非并行化实现"><a href="#非并行化实现" class="headerlink" title="非并行化实现"></a>非并行化实现</h4><p>思路相同。</p><p><strong>数据结构</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中心集合</span></span><br><span class="line">ArrayList&lt;ArrayList&lt;Double&gt;&gt; centers = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Double&gt;&gt;();</span><br><span class="line"><span class="comment">//all</span></span><br><span class="line">ArrayList&lt;ArrayList&lt;Double&gt;&gt; wines = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Double&gt;&gt;();</span><br><span class="line"><span class="comment">//距离最近的</span></span><br><span class="line">ArrayList&lt;ArrayList&lt;Double&gt;&gt;[] cluster;</span><br><span class="line"><span class="comment">//用k个中心</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//迭代次数</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><strong>读取wine.data文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">k_means3</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line"><span class="comment">//read file</span></span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(path)));  </span><br><span class="line">        String s = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">while</span>((s = reader.readLine())!=<span class="keyword">null</span>)&#123;  </span><br><span class="line">            ArrayList&lt;Double&gt; temp =  textToArray(s);</span><br><span class="line">            wines.add(temp);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Double&gt; <span class="title">textToArray</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">    ArrayList&lt;Double&gt; list = <span class="keyword">new</span> ArrayList&lt;Double&gt;();</span><br><span class="line">    String[] fileds = text.toString().split(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;fileds.length; i++)&#123;</span><br><span class="line">        list.add(Double.parseDouble(fileds[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置K和初始中心点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">intialCenters</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = wines.size();  </span><br><span class="line">    <span class="keyword">int</span> dis = length/k;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;  </span><br><span class="line">    <span class="comment">//初始中心</span></span><br><span class="line">        <span class="comment">//wineCenter[i]=wineAll.get(dis*i); </span></span><br><span class="line">    ArrayList&lt;Double&gt; tmp = wines.get(i*dis);</span><br><span class="line">        centers.add(tmp);</span><br><span class="line">    &#125;  </span><br><span class="line">    System.out.println(<span class="string">"K是："</span>+k+<span class="string">"\n初始确定的中心点是："</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;  </span><br><span class="line">        <span class="comment">//double[] dou = centers.get(i);  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">14</span>; j++) &#123;  </span><br><span class="line">        <span class="keyword">double</span> x = centers.get(i).get(j);</span><br><span class="line">            System.out.print(x+<span class="string">"   "</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println();  </span><br><span class="line">    &#125;  System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setK</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.k = k;  </span><br><span class="line">    cluster = <span class="keyword">new</span> ArrayList[k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++) &#123;</span><br><span class="line">    cluster[i] = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Double&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>计算过程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  calcu();</span><br><span class="line">  <span class="comment">//完成输出</span></span><br><span class="line">  <span class="comment">//中心点</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++) &#123;</span><br><span class="line">  <span class="keyword">int</span> size6 = centers.get(<span class="number">0</span>).size();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;size6; j++) &#123;</span><br><span class="line">  System.out.print(centers.get(i).get(j)+<span class="string">" "</span>);</span><br><span class="line">  &#125;System.out.println();</span><br><span class="line">  &#125;System.out.println();</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  PrintStream ps;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ps = <span class="keyword">new</span> PrintStream(<span class="string">"/home/huii/Desktop/kmeans2.txt"</span>);</span><br><span class="line">System.setOut(ps);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++) &#123;</span><br><span class="line">   <span class="keyword">int</span> size2 = cluster[i].size();</span><br><span class="line">   <span class="keyword">int</span> size3 = cluster[i].get(<span class="number">0</span>).size();</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;size2; j++) &#123;</span><br><span class="line">   <span class="keyword">double</span> t = i+<span class="number">1</span>;</span><br><span class="line">   System.out.print(t+<span class="string">" "</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">0</span>; z&lt;size3; z++) &#123;</span><br><span class="line">   System.out.print(cluster[i].get(j).get(z)+<span class="string">" "</span>);</span><br><span class="line">   &#125;System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calcu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> finish = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">//距离最近的</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;wines.size(); i++) &#123;</span><br><span class="line">  <span class="keyword">int</span> kind = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">double</span> mindis = Double.MAX_VALUE;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;k; j++) &#123;</span><br><span class="line">  <span class="keyword">double</span> dis = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> size4 = wines.get(<span class="number">0</span>).size();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">0</span>; z&lt;size4; z++) &#123;</span><br><span class="line">  <span class="keyword">double</span> a = wines.get(i).get(z);</span><br><span class="line">  <span class="keyword">double</span> b = centers.get(j).get(z);</span><br><span class="line">  dis += Math.pow((b-a)/(b+a), <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(dis&lt;mindis) &#123;</span><br><span class="line">  mindis = dis;</span><br><span class="line">  kind = j;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ArrayList&lt;Double&gt; tmp2 = wines.get(i);</span><br><span class="line">  cluster[kind].add(tmp2);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//重新计算中心</span></span><br><span class="line">  ArrayList&lt;ArrayList&lt;Double&gt;&gt; newlist = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Double&gt;&gt;();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;k; m++) &#123;</span><br><span class="line">  ArrayList&lt;Double&gt; newc = <span class="keyword">new</span> ArrayList&lt;Double&gt;();</span><br><span class="line">  <span class="keyword">int</span> size5 = cluster[m].get(<span class="number">0</span>).size();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;size5; n++) &#123;</span><br><span class="line">  <span class="comment">//每列平均值</span></span><br><span class="line">  <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> size = cluster[m].size();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>; c&lt;size; c++) &#123;</span><br><span class="line">  sum += cluster[m].get(c).get(n);</span><br><span class="line">  &#125;</span><br><span class="line">  newc.add(sum/size);</span><br><span class="line">  &#125;</span><br><span class="line">  newlist.add(newc);</span><br><span class="line">  <span class="comment">//ArrayList&lt;Double&gt; oldlist = cluster[k].get(index);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//比较前后中心是否相同，判断迭代是否结束</span></span><br><span class="line">  <span class="keyword">int</span> size1 = centers.size();</span><br><span class="line">  <span class="keyword">int</span> fildsize = centers.get(<span class="number">0</span>).size();</span><br><span class="line">  <span class="keyword">double</span> cdis = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>; l&lt;size1; l++) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> o=<span class="number">0</span>; o&lt;fildsize; o++) &#123;</span><br><span class="line">  <span class="keyword">double</span> t1 = centers.get(l).get(o);</span><br><span class="line">  <span class="keyword">double</span> t2 = newlist.get(l).get(o);</span><br><span class="line">  cdis += Math.pow((t1-t2)/(t1+t2), <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(cdis == <span class="number">0.0</span>)</span><br><span class="line">  finish = <span class="keyword">true</span>;</span><br><span class="line">  System.out.println(count);</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span>(!finish) &#123;</span><br><span class="line">  <span class="comment">//没完成</span></span><br><span class="line">  centers.clear();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;k; j++)&#123;</span><br><span class="line">  centers.add(newlist.get(j));</span><br><span class="line">  cluster[j].clear();</span><br><span class="line">  &#125;</span><br><span class="line">  calcu();</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/uploads/kmeans13.png" alt=""></p><p>第一列是所属的类别，第二列往后是各行的数据。</p><hr><p>实现后，发现要完全一致，大致看了一下，结果是对的，但是顺序不一样，(ó﹏ò｡)，不知道为什么MapReduce的输出顺序跟我想的不一样？？</p><p>非并行化的顺序是按照类别，类别中再按照数据集的顺序。</p><p>为了顺序输出，我在map中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;ArrayList&lt;Double&gt;&gt; wines = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Double&gt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">ArrayList&lt;Double&gt; x = <span class="keyword">new</span> ArrayList&lt;Double&gt;();</span><br><span class="line">    String[] tmp = value.toString().split(<span class="string">","</span>);</span><br><span class="line">    <span class="comment">//System.out.print((centerIndex+1)+" ");</span></span><br><span class="line">    <span class="keyword">double</span> index = centerIndex+<span class="number">1</span>;</span><br><span class="line">    x.add(index);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tmp.length; i++) &#123;</span><br><span class="line">    <span class="comment">//System.out.print(tmp[i]+" ");</span></span><br><span class="line">         <span class="keyword">double</span> y = Double.parseDouble(tmp[i]);</span><br><span class="line">         x.add(y);</span><br><span class="line">    &#125;<span class="comment">//System.out.println();</span></span><br><span class="line">    wines.add(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加cleanup方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"/home/huii/Desktop/kmeans1.txt"</span>);<span class="comment">//创建一个打印输出流，输出的目标是</span></span><br><span class="line">System.setOut(ps);<span class="comment">//把创建的打印输出流赋给系统。即系统下次向 ps输出</span></span><br><span class="line"><span class="keyword">int</span> size1 = wines.size();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;k+<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;size1; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(wines.get(j).get(<span class="number">0</span>) == i) &#123;</span><br><span class="line"><span class="keyword">int</span> size2 = wines.get(j).size();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;size2; m++) &#123;</span><br><span class="line">System.out.print(wines.get(j).get(m)+<span class="string">" "</span>);</span><br><span class="line">&#125;System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/uploads/kmeans14.png" alt=""></p><p>嘻嘻嘻٩(๑&gt;◡&lt;๑)۶ </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;实 验 内 容&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自 行 准 备 数 据 集 ， 设 计 一 个 数 据 挖 掘 算 法 （ 聚 类 、 分 类 、 频 繁 项 集 挖 掘 或 其 他主 题 ） 对 数 据 集 进 行 信 息 提 取 ， 要 求 分 别 使 用 并 行 化 和 非 并 行 化 的 方 式 实 现 该 算法 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;strong&gt;实 验 要 求&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自 行 对 比 并 行 化 和 非 并 行 化 实 现 方 法 的 数 据 挖 掘 结 果 ， 两 种 结 果 需 完 全 一致 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有用的参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://archive.ics.uci.edu/ml/index.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UCI数据集&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/chaoku/p/3748456.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MapReduce Kmeans聚类算法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zhang___yong/article/details/79053623&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;（java）K-means算法&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://yoursite.com/tags/study/"/>
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>算法—-局部搜索算法</title>
    <link href="http://yoursite.com/2018/05/27/%E7%AE%97%E6%B3%95-%E5%B1%80%E9%83%A8%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/27/算法-局部搜索算法/</id>
    <published>2018-05-27T15:03:41.000Z</published>
    <updated>2018-05-28T06:53:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>要求：</p><p>生成一个无向连通图，有100个点，1000条边，边上的权重是1到20之间的随机整数。</p><p>用局部搜索算法实现，再用Kruskal或prim算法进行验证。</p><hr><p>局部搜索算法的基本思路：</p><ol><li>设法得到一棵生成树T</li><li>检查不在T上的边，如果加上一条边，生成一个环，并删除一条环上的最大权重的边</li><li>重复2，直到所有边都不能优化为止。</li></ol><a id="more"></a> <p>对于以上要求和思路，我们可以一步一步地实现：</p><ol><li><p>生成无向连通图</p><p>这里，我采用链表的形式存储。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span><span class="comment">//链表节点</span></span><br><span class="line">Node(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> q);</span><br><span class="line"><span class="keyword">int</span> vseq;<span class="comment">//x</span></span><br><span class="line"><span class="keyword">int</span> vseq2;<span class="comment">//为了记录边增加的属性，q</span></span><br><span class="line"><span class="keyword">int</span> eseq;<span class="comment">//z</span></span><br><span class="line"><span class="keyword">int</span> weight;<span class="comment">//权重1-20,y</span></span><br><span class="line">Node *next;</span><br><span class="line">&#125;;</span><br><span class="line">Node::Node(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> q) &#123;</span><br><span class="line">vseq = x;</span><br><span class="line">vseq2 = q;</span><br><span class="line">weight = y;</span><br><span class="line">eseq = z;</span><br><span class="line">next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">List();</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>;<span class="comment">//找点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Finde</span><span class="params">(<span class="keyword">int</span> z)</span></span>;<span class="comment">//找边</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">finde</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;<span class="comment">//根据点得到边序号和权重</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushBack</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MovNode</span><span class="params">(Node *p)</span></span>;<span class="comment">//delete the node which data=x</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopBack</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopFront</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">Node* head;</span><br><span class="line">Node* tail;</span><br><span class="line">&#125;;</span><br><span class="line">List::List() &#123;</span><br><span class="line">head = <span class="literal">NULL</span>;</span><br><span class="line">tail = <span class="literal">NULL</span>;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> List::Find(<span class="keyword">int</span> x) &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "empty" &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Node* p = head;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;vseq == x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> List::finde(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "empty" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Node* p = head;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;vseq == x  ) </span><br><span class="line"><span class="keyword">return</span> p-&gt;eseq;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//return;|| (p-&gt;vseq2 == x &amp;&amp; p-&gt;vseq == y)&amp;&amp; p-&gt;vseq2 == y</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> List::Finde(<span class="keyword">int</span> z) &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "empty" &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Node* p = head;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;eseq == z) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> List::PushBack(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> q) &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">head = <span class="keyword">new</span> Node(x, y, z, q);</span><br><span class="line">tail = head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tail-&gt;next = <span class="keyword">new</span> Node(x, y, z, q);</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> List::Sort() &#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">Node* left = head;</span><br><span class="line">Node* right = head-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (left-&gt;vseq &gt; right-&gt;vseq) &#123;</span><br><span class="line">temp = left-&gt;vseq;</span><br><span class="line">left-&gt;vseq = right-&gt;vseq;</span><br><span class="line">right-&gt;vseq = temp;</span><br><span class="line">&#125;</span><br><span class="line">right = right-&gt;next;</span><br><span class="line">left = left-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> List::PrintList() &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"empty"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Node* tmp = head;</span><br><span class="line"><span class="keyword">while</span> (tmp != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"--&gt;"</span> &lt;&lt; tmp-&gt;vseq;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">","</span> &lt;&lt; tmp-&gt;weight;</span><br><span class="line">tmp = tmp-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> List::MovNode(Node *p) &#123;</span><br><span class="line"><span class="keyword">if</span> (p == tail) &#123;</span><br><span class="line">PopBack();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">PopFront();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Node *pp = head;</span><br><span class="line"><span class="keyword">while</span> (pp-&gt;next != p) &#123;</span><br><span class="line">pp = pp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pp-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::PopBack() &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "empty" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (head == tail)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> head;</span><br><span class="line">head = <span class="literal">NULL</span>;</span><br><span class="line">tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Node* cur = head;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next != tail)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> tail;</span><br><span class="line">tail = cur;</span><br><span class="line">tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> List::PopFront() &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "empty" &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node* tmp = head;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">delete</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要的存储结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="comment">//链表节点</span></span><br><span class="line"><span class="comment">//Node(int x, int y, int z, int q);</span></span><br><span class="line"><span class="keyword">int</span> vseq;<span class="comment">//x</span></span><br><span class="line"><span class="keyword">int</span> vseq2;<span class="comment">//为了记录边增加的属性，q</span></span><br><span class="line"><span class="keyword">int</span> eseq;<span class="comment">//z</span></span><br><span class="line"><span class="keyword">int</span> weight;<span class="comment">//权重1-20,y</span></span><br><span class="line"><span class="comment">//Node *next;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex</span> &#123;</span><span class="comment">//顶点   </span></span><br><span class="line">   <span class="comment">//Vertex(int x);</span></span><br><span class="line"><span class="keyword">int</span> seq;<span class="comment">//0-99</span></span><br><span class="line"><span class="keyword">int</span> color;<span class="comment">//whilte-0,gray-1,black-2</span></span><br><span class="line"><span class="keyword">int</span> d;<span class="comment">//discovet time</span></span><br><span class="line"><span class="keyword">int</span> f;<span class="comment">//finish time</span></span><br><span class="line"><span class="keyword">int</span> parent;<span class="comment">//π</span></span><br><span class="line">   <span class="comment">//Vertex *next;</span></span><br><span class="line"><span class="keyword">bool</span> has = <span class="literal">false</span>;<span class="comment">//是否有邻接点进栈</span></span><br><span class="line"><span class="comment">//int set = V;</span></span><br><span class="line">&#125;;</span><br><span class="line">List e[V];<span class="comment">//100个点，每个点一个链表</span></span><br><span class="line">List e2[V];<span class="comment">//找环的链表</span></span><br><span class="line">Edge e3[E];<span class="comment">//存储边的信息，找权重</span></span><br><span class="line">Vertex v[V];<span class="comment">//dfs</span></span><br><span class="line">Vertex v2[V];<span class="comment">//circle</span></span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;<span class="comment">//time</span></span><br><span class="line"><span class="built_in">stack</span>&lt;Vertex&gt; st;<span class="comment">//DFS</span></span><br><span class="line"><span class="built_in">stack</span>&lt;Vertex&gt; st2;<span class="comment">//找环的DFS</span></span><br><span class="line">Vertex tmp;<span class="comment">//top</span></span><br><span class="line">Node *p = <span class="literal">NULL</span>;<span class="comment">//head</span></span><br><span class="line"><span class="keyword">int</span> pp = <span class="number">0</span>;<span class="comment">//p.seq</span></span><br><span class="line">Node *ppp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> countt = <span class="number">0</span>;</span><br><span class="line">List tree;<span class="comment">//生成树</span></span><br><span class="line">List cir;<span class="comment">//求环</span></span><br><span class="line"><span class="built_in">stack</span>&lt;Edge&gt; ntree;<span class="comment">//不在树上</span></span><br><span class="line">Node *l;</span><br></pre></td></tr></table></figure><p>随机生成无向图</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randomnum</span><span class="params">()</span><span class="comment">//返回一个0-99之间的随机数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="comment">//srand(0);//设置随机数种子，使每次运行获取的随机数不同</span></span><br><span class="line">a = rand() % V;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randomnum2</span><span class="params">()</span><span class="comment">//返回一个0-19之间的随机数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="comment">//srand(0);//设置随机数种子，使每次运行获取的随机数不同</span></span><br><span class="line">b = rand() % <span class="number">20</span>;</span><br><span class="line">b++;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成无向连通图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creDGra</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//n个点，至少n-1条边</span></span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="comment">//Node v[V];//100个点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; i++) &#123;</span><br><span class="line">a = randomnum();</span><br><span class="line">b = randomnum();</span><br><span class="line">c = randomnum2();<span class="comment">//weight</span></span><br><span class="line"><span class="keyword">if</span> (!e[a].Find(b) &amp;&amp; a!=b) &#123;</span><br><span class="line">e[a].PushBack(b,c,i,a);</span><br><span class="line">e[b].PushBack(a,c,i,b);</span><br><span class="line">e3[i].eseq = i;</span><br><span class="line">e3[i].vseq = a;</span><br><span class="line">e3[i].vseq2 = b;</span><br><span class="line">e3[i].weight = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>找出一棵生成树T</p><p>这个利用DFS就可以实现，这里写的是利用栈实现的非递归DFS。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">()</span> </span>&#123;<span class="comment">//not ..</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; "start with " &lt;&lt; s &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//initialize</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">v[i].seq = i;</span><br><span class="line">v[i].color = WHITE;</span><br><span class="line">v[i].d = <span class="number">-1</span>;</span><br><span class="line">v[i].f = <span class="number">-1</span>;</span><br><span class="line">v[i].parent = V;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//push the first</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; V; s++) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[s].color == WHITE) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; v[s].seq &lt;&lt; endl;</span></span><br><span class="line">v[s].color = GRAY;</span><br><span class="line">v[s].d = t;</span><br><span class="line">t++;</span><br><span class="line">st.push(v[s]);</span><br><span class="line"><span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">tmp = st.top();</span><br><span class="line"><span class="comment">//cout &lt;&lt; tmp.seq &lt;&lt; " color:" &lt;&lt; tmp.color &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span> (v[tmp.seq].color == BLACK) &#123;</span><br><span class="line">st.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "top: " &lt;&lt; tmp.seq &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//adjacent</span></span><br><span class="line">p = e[tmp.seq].head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e[tmp.seq].count; i++) &#123;</span><br><span class="line">pp = p-&gt;vseq;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "list:" &lt;&lt; pp &lt;&lt; "  "&lt;&lt;v[pp].color&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span> (v[pp].color == WHITE) &#123;</span><br><span class="line">tree.PushBack(pp, p-&gt;weight, p-&gt;eseq, tmp.seq);</span><br><span class="line">v[pp].color = GRAY;</span><br><span class="line">v[pp].d = t;</span><br><span class="line">t++;</span><br><span class="line">v[pp].parent = tmp.seq;</span><br><span class="line">st.push(v[pp]);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">tmp.has = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (v[pp].color == GRAY) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (v[pp].color == BLACK) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!tmp.has) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; tmp.seq &lt;&lt; " has " &lt;&lt; tmp.has &lt;&lt; endl;</span></span><br><span class="line">v[tmp.seq].color = BLACK;</span><br><span class="line">v[tmp.seq].f = t;</span><br><span class="line">t++;</span><br><span class="line">st.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>得到不在树上的边</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ninT</span><span class="params">()</span> </span>&#123;<span class="comment">//在T上，不在T上，eseq判断</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!tree.Finde(i)) &#123;</span><br><span class="line">ntree.push(e3[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成树的邻接链表</p><p>一开始我直接用的整个生成图的邻接链表去DFS找环，后来想想不对，因为不是所有的边都在那个数+边里。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成树的邻接链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tlink</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//intialize e2  or clear</span></span><br><span class="line"><span class="keyword">if</span> (countt &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; e2[i].count; j++) &#123;</span><br><span class="line">Node * kk = e2[i].head;</span><br><span class="line">e2[i].MovNode(kk);</span><br><span class="line">j--;</span><br><span class="line"><span class="comment">//kk = kk-&gt;next;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">l = tree.head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tree.count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!e2[l-&gt;vseq].Find(l-&gt;vseq2)) &#123;</span><br><span class="line">e2[l-&gt;vseq].PushBack(l-&gt;vseq2, l-&gt;weight, l-&gt;eseq, l-&gt;vseq);</span><br><span class="line">e2[l-&gt;vseq2].PushBack(l-&gt;vseq, l-&gt;weight, l-&gt;eseq, l-&gt;vseq2);</span><br><span class="line">&#125;</span><br><span class="line">l = l-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>找环</p><p>原来是一棵树，加上一条边，一定有一个环，且新加的这条边一定在环上。设这条新加的边为(a,b)，则以a为起始点做DFS，遇到第一条返回边时，这个环就找到了。（无向图只有树边和返回边）</p><p>在实现过程中，我先将新加的边加入到生成树中，再生成邻接链表，在DFS过程中，只记录返回边，环根据父节点可以得到。（从返回边的一端回溯，到另一端点，就能找出这个环）</p><p>得到了环之后，就可以找出环上权重最大的边删除。一直循环到所有不在T上的边都试了一次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找环</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//加边</span></span><br><span class="line"><span class="keyword">while</span> (!ntree.empty()) &#123;</span><br><span class="line">countt++;</span><br><span class="line"><span class="comment">//cout &lt;&lt; countt &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//Node *r = ntree.top();//一条不在t的边</span></span><br><span class="line">Edge r = ntree.top();</span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line">tree.PushBack(r.vseq,r.weight,r.eseq,r.vseq2);</span><br><span class="line">tlink();</span><br><span class="line"></span><br><span class="line"><span class="comment">//dfs找环退出</span></span><br><span class="line"><span class="comment">//要按tree中的边dfs，不能按原来的</span></span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">v2[i].seq = i;</span><br><span class="line">v2[i].color = WHITE;</span><br><span class="line">v2[i].d = <span class="number">-1</span>;</span><br><span class="line">v2[i].f = <span class="number">-1</span>;</span><br><span class="line">v2[i].parent = V;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//push the first</span></span><br><span class="line"><span class="comment">//新加的边必定在环内，以该边的一点为dfs的起始点，找到返回边，说明有环</span></span><br><span class="line"><span class="comment">//无向图只有树边和返回边</span></span><br><span class="line"><span class="comment">//for (int s = 0; s &lt; V; s++) &#123;</span></span><br><span class="line"><span class="keyword">int</span> s = r.vseq;</span><br><span class="line"><span class="keyword">if</span> (v2[s].color == WHITE) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; v[s].seq &lt;&lt; endl;</span></span><br><span class="line">v2[s].color = GRAY;</span><br><span class="line">v2[s].d = t;</span><br><span class="line">t++;</span><br><span class="line">st2.push(v2[s]);</span><br><span class="line"><span class="keyword">while</span> (!st2.empty()) &#123;</span><br><span class="line">tmp = st2.top();</span><br><span class="line"><span class="comment">//cout &lt;&lt; tmp.seq &lt;&lt; " color:" &lt;&lt; tmp.color &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span> (v2[tmp.seq].color == BLACK) &#123;</span><br><span class="line">st2.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "top: " &lt;&lt; tmp.seq &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//adjacent</span></span><br><span class="line">p = e2[tmp.seq].head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e2[tmp.seq].count; i++) &#123;</span><br><span class="line">pp = p-&gt;vseq;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "list:" &lt;&lt; pp &lt;&lt; "  "&lt;&lt;v[pp].color&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span> (v2[pp].color == WHITE) &#123;</span><br><span class="line"><span class="comment">//tree.PushBack(pp, p-&gt;weight, p-&gt;eseq, tmp.seq);</span></span><br><span class="line">v2[pp].color = GRAY;</span><br><span class="line">v2[pp].d = t;</span><br><span class="line">t++;</span><br><span class="line">v2[pp].parent = tmp.seq;</span><br><span class="line">st2.push(v2[pp]);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">tmp.has = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (v2[pp].color == GRAY) &#123;</span><br><span class="line"><span class="keyword">if</span> (pp != v2[p-&gt;vseq2].parent) &#123;</span><br><span class="line">cir.PushBack(pp, p-&gt;weight, p-&gt;eseq, p-&gt;vseq2);</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (v2[pp].color == BLACK) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!tmp.has) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; tmp.seq &lt;&lt; " has " &lt;&lt; tmp.has &lt;&lt; endl;</span></span><br><span class="line">v2[tmp.seq].color = BLACK;</span><br><span class="line">v2[tmp.seq].f = t;</span><br><span class="line">t++;</span><br><span class="line"><span class="comment">//tmp.color = BLACK;</span></span><br><span class="line"><span class="comment">//tmp.f = t;</span></span><br><span class="line"><span class="comment">//t++;</span></span><br><span class="line">st2.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line">         <span class="comment">//环</span></span><br><span class="line">Node *u = cir.head;</span><br><span class="line"><span class="keyword">int</span> k = L;</span><br><span class="line"><span class="keyword">int</span> h = L;</span><br><span class="line"><span class="keyword">int</span> w = L;</span><br><span class="line"><span class="keyword">while</span> (k != s) &#123;</span><br><span class="line">k = v2[u-&gt;vseq2].parent;</span><br><span class="line">h = e[u-&gt;vseq2].finde(k, u-&gt;vseq2);</span><br><span class="line">w = e3[h].weight;</span><br><span class="line"><span class="comment">//cout &lt;&lt; u-&gt;vseq2 &lt;&lt; " " &lt;&lt; k &lt;&lt; " " &lt;&lt; endl;</span></span><br><span class="line">cir.PushBack(u-&gt;vseq2,w,h,k);</span><br><span class="line">u = u-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------</span></span><br><span class="line"><span class="comment">//环中最大的</span></span><br><span class="line">u = cir.head;</span><br><span class="line"><span class="comment">//Node *m = u;</span></span><br><span class="line"><span class="keyword">int</span> maxw = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> maxseq = u-&gt;eseq;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cir.count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (u-&gt;weight &gt; maxw) &#123;</span><br><span class="line">maxseq = u-&gt;eseq;</span><br><span class="line">maxw = u-&gt;weight;</span><br><span class="line">&#125;</span><br><span class="line">u = u-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------</span></span><br><span class="line"><span class="comment">//删除最大的</span></span><br><span class="line">u = tree.head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tree.count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (u-&gt;eseq == maxseq) &#123;</span><br><span class="line">tree.MovNode(u);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">u = u-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">ntree.pop();</span><br><span class="line"><span class="comment">//------------</span></span><br><span class="line"><span class="comment">//intializa tree</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cir.count; j++) &#123;</span><br><span class="line">Node * kk = cir.head;</span><br><span class="line">cir.MovNode(kk);</span><br><span class="line">j--;</span><br><span class="line"><span class="comment">//kk = kk-&gt;next;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我选择用kruskal算法进行验证</p><p>重点是并查集find和unite的实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root = x;</span><br><span class="line"><span class="keyword">while</span> (root != par[root]) root = par[root];</span><br><span class="line"><span class="keyword">while</span> (x != root) &#123;</span><br><span class="line"><span class="keyword">int</span> t = par[x];</span><br><span class="line">par[x] = root;</span><br><span class="line">x = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x = find(x);</span><br><span class="line">y = find(y);</span><br><span class="line"><span class="keyword">if</span> (Rank[x] &lt; Rank[y]) &#123;</span><br><span class="line">par[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">par[y] = x;</span><br><span class="line"><span class="keyword">if</span> (Rank[x] == Rank[y]) Rank[x]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mst_kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; i++) &#123;</span><br><span class="line">e4[i] = e3[i];</span><br><span class="line"><span class="comment">//cout &lt;&lt; e4[i].vseq &lt;&lt; "  " &lt;&lt; e3[i].vseq &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line"><span class="comment">//set[i].PushBack();</span></span><br><span class="line">par[i] = i;</span><br><span class="line">Rank[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Edge tempp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E<span class="number">-1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; E; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (e4[i].weight &gt; e4[j].weight) &#123;</span><br><span class="line">tempp = e4[j];</span><br><span class="line">e4[j] = e4[i];</span><br><span class="line">e4[i] = tempp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> vv = e4[i].vseq;</span><br><span class="line"><span class="keyword">int</span> uu = e4[i].vseq2;</span><br><span class="line"><span class="comment">//cout &lt;&lt; vv &lt;&lt; " " &lt;&lt; v[vv].set &lt;&lt; " " &lt;&lt; uu &lt;&lt; " " &lt;&lt; v[uu].set &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span> (find(vv) != find(uu)) &#123;</span><br><span class="line">A.PushBack(vv,e4[i].weight, e4[i].eseq, uu);</span><br><span class="line"><span class="comment">//v[uu].set = v[vv].set;</span></span><br><span class="line">unite(vv, uu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main函数</p><p>输出局部搜索算法和Kruskal算法的最小生成树的权重进行比较，如果相等，则证明正确。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">creDGra();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">e[i].PrintList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">DFS();</span><br><span class="line">ninT();</span><br><span class="line">findc();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"============================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//tree.PrintList();//最小生成树</span></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line">l = tree.head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tree.count; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; l-&gt;vseq &lt;&lt; <span class="string">" "</span> &lt;&lt; l-&gt;vseq2 &lt;&lt; <span class="string">" "</span> &lt;&lt; l-&gt;weight &lt;&lt; <span class="string">" "</span> &lt;&lt; l-&gt;eseq &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sum1 += l-&gt;weight;</span><br><span class="line">l = l-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"局部搜索:"</span>;<span class="built_in">cout</span> &lt;&lt; sum1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//-------------------------</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line">mst_kruskal();</span><br><span class="line">l = A.head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.count; i++) &#123;</span><br><span class="line">sum2 += l-&gt;weight;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; l-&gt;vseq &lt;&lt; <span class="string">" "</span> &lt;&lt; l-&gt;vseq2 &lt;&lt; <span class="string">" "</span> &lt;&lt; l-&gt;weight &lt;&lt; <span class="string">" "</span> &lt;&lt; l-&gt;eseq &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">l = l-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"kruskal："</span> &lt;&lt; sum2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果截图</p><p><img src="/uploads/algorithm_local.png" alt=""></p></li></ol><p>完成，✿✿ヽ(°▽°)ノ✿</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要求：&lt;/p&gt;
&lt;p&gt;生成一个无向连通图，有100个点，1000条边，边上的权重是1到20之间的随机整数。&lt;/p&gt;
&lt;p&gt;用局部搜索算法实现，再用Kruskal或prim算法进行验证。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;局部搜索算法的基本思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设法得到一棵生成树T&lt;/li&gt;
&lt;li&gt;检查不在T上的边，如果加上一条边，生成一个环，并删除一条环上的最大权重的边&lt;/li&gt;
&lt;li&gt;重复2，直到所有边都不能优化为止。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://yoursite.com/tags/study/"/>
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop-PageRank算法的MapReduce实现</title>
    <link href="http://yoursite.com/2018/05/21/Hadoop-PageRank%E7%AE%97%E6%B3%95%E7%9A%84MapReduce%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/05/21/Hadoop-PageRank算法的MapReduce实现/</id>
    <published>2018-05-21T03:21:15.000Z</published>
    <updated>2018-05-21T11:56:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在本次实验中，我是参考了<a href="https://www.cnblogs.com/Vicky01200059/p/4230661.html" target="_blank" rel="noopener">PageRank算法的MapReduce实现</a></p><p>输入文本格式：网页+\t+该网页链接到的网页的集合（相互之间用英文逗号分开）</p><p><img src="/uploads/hadoop_pagerank.png" alt=""></p><p>实验要求&amp;输出文本格式：</p><p><img src="/uploads/hadoop_pagerank2.png" alt=""></p><a id="more"></a> <hr><p>PageRank算法思想：</p><p>如果网页T存在一个指向网页A的连接，则表明T的所有者认为A比较重要，从而把T的一部分重要性得分赋予A。这个重要性得分值为：PR（T）/L(T)</p><p>其中PR（T）为T的PageRank值，L(T)为T的出链数。</p><p>则A的PageRank值为一系列类似于T的页面重要性得分值的累加。</p><p>即一个页面的得票数由所有链向它的页面的重要性来决定，到一个页面的<a href="http://zh.wikipedia.org/wiki/%E8%B6%85%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener">超链接</a>相当于对该页投一票。一个页面的PageRank是由所有链向它的页面（链入页面）的重要性经过<a href="http://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92" target="_blank" rel="noopener">递归</a>算法得到的。一个有较多链入的页面会有较高的等级，相反如果一个页面没有任何链入页面，那么它没有等级。</p><hr><p>解决思路：</p><p>可以得到公式</p><p><img src="/uploads/hadoop_pagerank3.png" alt=""></p><p>PR(A)即A的PageRank值；d为阻尼因子，实验中给出为0.85；L(B)即B网站所有的出链数量（即B网站内的所有链接的数量）。</p><p>所以公式的意义是：A的PageRank值=（1-d）+d*（链接到A的所有网站的PR值/该网站的所有出链数量之和）。这里首次计算时为每个链接附上一个初始PR值，实验中给出为1.0。</p><p>下面举个例子，这样能更清楚地知道map和reduce的输入输出对应该怎么写。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AB,C,D</span><br><span class="line">BA,C</span><br><span class="line">CA,B,D</span><br><span class="line">DA,C</span><br></pre></td></tr></table></figure><p>为了计算PR(A)，就要知道所有链接到A的网站，PR值及其出链数。在例子中，这些网站就是B,C,D，</p><p>所以要得到类似   B,PR(B),2  这种值，再加上记号表明这是B到A的，可以形成&lt;A,  B,PR(B),2 &gt;。MapReduce中会将同一个key的分到一个reduce中，因此在处理key为A时，会有如下输入对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;A, B,PR(B),2&gt;</span><br><span class="line">&lt;A, C,PR(C),3&gt;</span><br><span class="line">&lt;A, D,PR(D),2&gt;</span><br></pre></td></tr></table></figure><p>就可以利用公式，计算出PR(A)。因为要进行迭代，所以还必须要有   A       B,C,D   。</p><p>为了区分 ，将   B,PR(B),2  改为用 ; 分隔：B;PR(B);2。</p><p>初始值是1.0可以直接赋给网站，但是迭代中，要怎么获取网站当前的PR值呢？</p><p>在reduce中已经计算出了PR(A)，我们可以将它加到key中输出作为下一次map的输入key：A,PR(A)</p><p><strong>TIPS：</strong></p><p><strong>（1）</strong>根据分析，map第一次输入为A     B,C,D，迭代中的输入为&lt;A,PR(A) ,   B,C,D&gt;，是否需要写2个map函数？</p><p>答：可以只写一个map函数，在第一次中，可以利用<strong>KeyValueTextInputFormat</strong>，它将\t之前的作为key读入，为A；在迭代中读入的key为A,PR(A)。利用分隔符  ,   可以得到相应的值。</p><p><strong>（2）</strong>在实现中，所有与计算PR值有关的必须用double类型，因为要保留10位小数。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> d = <span class="number">0.85</span>;<span class="comment">//阻尼系数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text key, Text value, Context context)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//输入文件格式： a    b,c,d(first)  采用KeyValueTextInputFormat</span></span><br><span class="line"><span class="comment">//           a,pr    b,c,d(next)</span></span><br><span class="line">String[] out = value.toString().split(<span class="string">","</span>);<span class="comment">//外链</span></span><br><span class="line">String[] link = key.toString().split(<span class="string">","</span>);<span class="comment">//next</span></span><br><span class="line"><span class="keyword">double</span> pr = <span class="number">1.0</span>;<span class="comment">//初始pr值</span></span><br><span class="line"><span class="keyword">if</span>(link.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//next</span></span><br><span class="line">pr = Double.parseDouble(link[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> outNum = out.length;<span class="comment">//a的出链数</span></span><br><span class="line"><span class="comment">//输出格式&lt;a的各出链:b/c/d, a;pr;outNum&gt;</span></span><br><span class="line"><span class="keyword">for</span>(String s: out) &#123;</span><br><span class="line">context.write(<span class="keyword">new</span> Text(s), </span><br><span class="line"><span class="keyword">new</span> Text(link[<span class="number">0</span>]+<span class="string">";"</span>+pr+<span class="string">";"</span>+outNum));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&lt;a, out&gt;以便迭代处理</span></span><br><span class="line">context.write(<span class="keyword">new</span> Text(link[<span class="number">0</span>]), value);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">double</span> pr = (<span class="keyword">double</span>) (<span class="number">1.0</span>-d);<span class="comment">// PageRank值  </span></span><br><span class="line">        String[] str;  </span><br><span class="line">        Text outLinks = <span class="keyword">new</span> Text();<span class="comment">// 记录该链接的所有出链信息  </span></span><br><span class="line">        <span class="comment">// 集合的数据位key的所有入链链接的page,rank,count值，以及key的所有出链信息  </span></span><br><span class="line">        <span class="keyword">for</span> (Text t : values) &#123;  </span><br><span class="line">            <span class="comment">// 入链信息以';'分割，出链信息以','分割，以此区别  </span></span><br><span class="line">            str = t.toString().split(<span class="string">";"</span>);  </span><br><span class="line">            <span class="keyword">if</span> (str.length == <span class="number">3</span>) &#123;  </span><br><span class="line">                <span class="comment">// 计算key的rank值=(1-d)+d*key的入链rank值/其出链数  </span></span><br><span class="line">                pr += Double.parseDouble(str[<span class="number">1</span>]) / Integer.parseInt(str[<span class="number">2</span>])  * d;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                outLinks.set(t.toString());  <span class="comment">//&lt;a,  b,c,d&gt;</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        context.write(<span class="keyword">new</span> Text(key.toString() + <span class="string">","</span> + pr), outLinks); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>main函数中的迭代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://localhost:9000"</span>);</span><br><span class="line"><span class="comment">// 进行迭代的过程  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; </span><br><span class="line">        String[] otherArgs = <span class="keyword">new</span> String[]&#123;<span class="string">"/user/pr/out"</span>+i, <span class="string">"/user/pr/out"</span>+(i+<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="keyword">if</span> (otherArgs.length != <span class="number">2</span>) &#123;</span><br><span class="line">        System.err.println(<span class="string">"Usage: PageRank &lt;in&gt; &lt;out&gt;"</span>);</span><br><span class="line">        System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Job job = Job.getInstance(conf, <span class="string">"PageRank"</span>);</span><br><span class="line">        job.setJarByClass(PageRank.class);</span><br><span class="line">        job.setInputFormatClass(KeyValueTextInputFormat.class); </span><br><span class="line">        job.setMapperClass(Map.class); </span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        <span class="comment">//设置Map输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(Text.class);</span><br><span class="line">        <span class="comment">//设置Reduce输出类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(Text.class);</span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">//System.exit(job.waitForCompletion(true) ? 0 : 1);</span></span><br><span class="line">        job.waitForCompletion(<span class="keyword">true</span>); </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>到此，输出的结果为：</p><p><img src="/uploads/hadoop_pagerank4.png" alt=""></p><p>可以看到输出结果为：网站,PR    网站中的链接</p><p>与标准输出还有距离，因此，我添加了一对map和reduce用来标准化输出。</p><p>为了按照PR排列，结合reduce是按照key排列的，且顺序是<strong>从小到大</strong>，因此先将PR作为key，网站作为value。</p><p>又因为，在标准输出中，是按照PR<strong>从大到小</strong>进行排列。所以可以在PR前加个负号 - 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//10次迭代后，按格式输出  要按pr值排序，保留10位小数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FinMap</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">DoubleWritable</span>, <span class="title">Text</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text key, Text value, Context context)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//           a,pr    b,c,d(next)</span></span><br><span class="line"><span class="comment">//String[] k = key.toString().split(",");</span></span><br><span class="line"><span class="comment">//这样是从小到大排序</span></span><br><span class="line"><span class="comment">//context.write(new Text(String.format("%.10f", Double.parseDouble(k[1]))), new Text(k[0]);</span></span><br><span class="line">   String line = key.toString();</span><br><span class="line">            String url = line.split(<span class="string">","</span>)[<span class="number">0</span>];</span><br><span class="line">            String pr = line.split(<span class="string">","</span>)[<span class="number">1</span>];</span><br><span class="line">            context.write(<span class="keyword">new</span> DoubleWritable(-Double.valueOf(pr)), <span class="keyword">new</span> Text(url));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FinReduce</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">DoubleWritable</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(DoubleWritable key, Iterable&lt;Text&gt; values, Context context)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Text value: values) &#123;</span><br><span class="line">                Double pr = -Double.valueOf(key.toString());</span><br><span class="line">                String result = <span class="string">"("</span> + value.toString() + <span class="string">","</span> + String.format(<span class="string">"%.10f"</span>, pr) + <span class="string">")"</span>;</span><br><span class="line">                context.write(<span class="keyword">null</span>, <span class="keyword">new</span> Text(result));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>相应的，在main函数中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">String[] otherArgs = <span class="keyword">new</span> String[]&#123;<span class="string">"/user/pr/out"</span>+<span class="number">10</span>, <span class="string">"/user/pr/out"</span>+<span class="number">11</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (otherArgs.length != <span class="number">2</span>) &#123;</span><br><span class="line">    System.err.println(<span class="string">"Usage: PageRank &lt;in&gt; &lt;out&gt;"</span>);</span><br><span class="line">    System.exit(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Job job = Job.getInstance(conf, <span class="string">"PageRank"</span>);</span><br><span class="line">    job.setJarByClass(PageRank.class);</span><br><span class="line">    job.setInputFormatClass(KeyValueTextInputFormat.class); </span><br><span class="line">    job.setMapperClass(FinMap.class); </span><br><span class="line">    job.setReducerClass(FinReduce.class);</span><br><span class="line">    <span class="comment">//设置Map输出类型</span></span><br><span class="line">    job.setMapOutputKeyClass(DoubleWritable.class);</span><br><span class="line">    job.setMapOutputValueClass(Text.class);</span><br><span class="line">    <span class="comment">//设置Reduce输出类型</span></span><br><span class="line">    job.setOutputKeyClass(NullWritable.class);</span><br><span class="line">    job.setOutputValueClass(Text.class);</span><br><span class="line">    FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">0</span>]));</span><br><span class="line">    FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">//System.exit(job.waitForCompletion(true) ? 0 : 1);</span></span><br><span class="line">    job.waitForCompletion(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/uploads/hadoop_pagerank5.png" alt=""></p><p>✿✿ヽ(°▽°)ノ✿</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在本次实验中，我是参考了&lt;a href=&quot;https://www.cnblogs.com/Vicky01200059/p/4230661.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PageRank算法的MapReduce实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;输入文本格式：网页+\t+该网页链接到的网页的集合（相互之间用英文逗号分开）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/hadoop_pagerank.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;实验要求&amp;amp;输出文本格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/hadoop_pagerank2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://yoursite.com/tags/study/"/>
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop-文档倒排索引算法实现</title>
    <link href="http://yoursite.com/2018/05/13/Hadoop-%E6%96%87%E6%A1%A3%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/05/13/Hadoop-文档倒排索引算法实现/</id>
    <published>2018-05-12T16:18:32.000Z</published>
    <updated>2018-05-21T11:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>关于Hadoop的安装以及实验一可以参考：</p><p><a href="https://www.jianshu.com/nb/6721627" target="_blank" rel="noopener">Tiny_16 Hadoop学习</a></p></li><li><p>下面来看实验二：文档倒排索引算法实现<br>（debug的过程还是挺艰辛的）</p><p>实验内容包括：（1）去除stop-words　（2）统计单词在每篇文档中出现的频率</p><p>一开始的思路我是参考的<a href="https://www.cnblogs.com/SeaSky0606/p/4820786.html" target="_blank" rel="noopener">Hadoop之倒排索引</a>，感觉挺好的，但是做到后面发现有问题。</p><p>还是从头开始吧。</p><a id="more"></a> </li></ul><hr><h5 id="（1）首先是处理停用词表"><a href="#（1）首先是处理停用词表" class="headerlink" title="（1）首先是处理停用词表"></a>（1）首先是处理停用词表</h5><p>利用MapReduce的分布式缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加停用词表</span></span><br><span class="line">job.addCacheFile(<span class="keyword">new</span> Path(<span class="string">"hdfs://10.102.0.197:9000/stop_words/stop_words_eng.txt"</span>).toUri());</span><br></pre></td></tr></table></figure><p>在一开始进行处理，所以在map函数中通过context来访问到缓存的文件，重写setup方法来进行初始化 。setup方法用于初始化，只会执行一次。将停用词表的每一个词读出存入set中。（感觉在reduce的setup方法中处理也可以）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Set&lt;String&gt; stopwords = <span class="keyword">new</span> TreeSet&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> URI[] file;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</span><br><span class="line"><span class="comment">//初始化 只执行一次</span></span><br><span class="line">Configuration conf = context.getConfiguration();</span><br><span class="line"><span class="comment">//获得停用词表</span></span><br><span class="line">file = Job.getInstance(conf).getCacheFiles();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; file.length; i++)&#123;</span><br><span class="line">String line;</span><br><span class="line">Path pa = <span class="keyword">new</span> Path(file[i].getPath());</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                <span class="keyword">new</span> FileReader(pa.getName().toString()));</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(line);</span><br><span class="line"><span class="keyword">while</span> (itr.hasMoreTokens())&#123;</span><br><span class="line">stopwords.add(itr.nextToken());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（2）分析MapReduce的输入、输出对。"><a href="#（2）分析MapReduce的输入、输出对。" class="headerlink" title="（2）分析MapReduce的输入、输出对。"></a>（2）分析MapReduce的输入、输出对。</h5><p>按照之前链接上的思路，与给的标准答案对比，会出现txt排序不正确的问题，因为MapReduce的默认排序是对key。因此必须将txt也作为reduce输入key的一部分。</p><p>map类：输入对&lt;offset, line&gt;，输出对 &lt; key  txt,  1 &gt;</p><h5 id="tips：中间分隔符应该用ASCII表排在数字之前的符号，否则单个数字就会被排到后面去"><a href="#tips：中间分隔符应该用ASCII表排在数字之前的符号，否则单个数字就会被排到后面去" class="headerlink" title="tips：中间分隔符应该用ASCII表排在数字之前的符号，否则单个数字就会被排到后面去"></a>tips：中间分隔符应该用ASCII表排在数字之前的符号，否则单个数字就会被排到后面去</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;offset,line&gt;--&gt;&lt;word:txt,1&gt;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">private</span> Text key1 = <span class="keyword">new</span> Text();</span><br><span class="line"><span class="comment">//private Text value1 = new Text();</span></span><br><span class="line"><span class="keyword">private</span> FileSplit split;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    split = (FileSplit) context.getInputSplit();</span><br><span class="line">    <span class="comment">//StringTokenizer itr = new StringTokenizer(value.toString());</span></span><br><span class="line">    String[] itr = value.toString().split(<span class="string">"\\W"</span>);</span><br><span class="line">    <span class="comment">//[^a-zA-Z0-9] only letters</span></span><br><span class="line">    <span class="keyword">for</span> (String s : itr) &#123;</span><br><span class="line">        s = s.toLowerCase();</span><br><span class="line">        <span class="keyword">if</span>(!stopwords.contains(s) &amp;&amp; !s.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        key1.set(s + <span class="string">" "</span>+ split.getPath().getName());</span><br><span class="line">        <span class="comment">//必须用空格作为分隔符吗？？ASCII</span></span><br><span class="line">        <span class="comment">//用：就会不对</span></span><br><span class="line">        <span class="comment">//value1.set("1");</span></span><br><span class="line">        context.write(key1, one);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便后面的计算频数，在map和reduce之间添加一个combine类，先将一个词在同一个txt的出现次数加起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Combine</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//private IntWritable value2 = new IntWritable(1);</span></span><br><span class="line">    <span class="comment">//private Text key2 = new Text();</span></span><br><span class="line">    <span class="comment">//private Text value2 = new Text();</span></span><br><span class="line">    <span class="keyword">private</span> IntWritable value2 = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//frequence</span></span><br><span class="line">    <span class="keyword">for</span>(IntWritable val : values) &#123;</span><br><span class="line">       sum += val.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    int splitIndex = key.toString().indexOf(":");</span></span><br><span class="line"><span class="comment">    value2.set(key.toString().substring(splitIndex+1)+","+sum);//txt,sum</span></span><br><span class="line"><span class="comment">    key.set(key.toString().substring(0, splitIndex));//word</span></span><br><span class="line"><span class="comment">    //key2.set(key.toString().substring(0, splitIndex));//word</span></span><br><span class="line"><span class="comment">    //String[] itr = key.toString().split(":");</span></span><br><span class="line"><span class="comment">    //key2.set(itr[0]);</span></span><br><span class="line"><span class="comment">    //value2.set(itr[1]+","+sum);</span></span><br><span class="line"><span class="comment">    context.write(key, value2);//&lt;word:txt,"1"&gt; -&gt; &lt;word, txt,sum&gt;</span></span><br><span class="line"><span class="comment">    //value2.set(sum);</span></span><br><span class="line"><span class="comment">    //context.write(key, value2);//&lt;word:txt, 1&gt; -&gt; &lt;word:txt, sum&gt;</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//这样文件的位置不对 所以key必须是&lt;word:txt&gt;</span></span><br><span class="line">    value2.set(sum);</span><br><span class="line">    context.write(key, value2);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为当前key为word txt，为了将同一个word分到一个reduce上，需要自定义partioner类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//所以为了将按word分到一起...</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Partitioner</span> <span class="keyword">extends</span> <span class="title">HashPartitioner</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text key, IntWritable value, <span class="keyword">int</span> numReduceTasks)</span></span>&#123;</span><br><span class="line">String word = <span class="keyword">new</span> String();</span><br><span class="line">word = key.toString().split(<span class="string">" "</span>)[<span class="number">0</span>];<span class="comment">//=&gt; word</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getPartition(<span class="keyword">new</span> Text(word), value, numReduceTasks);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的reduce类：输入<word txt,="" sum="">，输出&lt;word, ..(格式).&gt;</word></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//&lt;word   ,txt,sum&gt; -&gt; &lt;word, &lt;&gt;;&lt;&gt;&gt;  ×</span></span><br><span class="line">    <span class="comment">//change to &lt;word:txt, sum&gt; -&gt; &lt;word, &lt;&gt;;&lt;&gt;.&gt;</span></span><br><span class="line">    <span class="keyword">private</span> Text key3 = <span class="keyword">new</span> Text();</span><br><span class="line">        <span class="keyword">private</span> Text value3 = <span class="keyword">new</span> Text();</span><br><span class="line">        <span class="keyword">private</span> String cur = <span class="string">" "</span>;<span class="comment">//记录word</span></span><br><span class="line">        <span class="keyword">private</span> String list = <span class="string">""</span>;<span class="comment">//记录文件列表</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">         <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span>(IntWritable val : values) &#123;</span><br><span class="line">         temp += val.get();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(!cur.equals((key.toString().split(<span class="string">" "</span>))[<span class="number">0</span>]) &amp;&amp; !cur.equals(<span class="string">" "</span>)) &#123;</span><br><span class="line">         <span class="comment">//如果cur不等于当前的word,说明上一个已经结束，下一个开始</span></span><br><span class="line">         <span class="comment">//输出上一个total</span></span><br><span class="line">         list += <span class="string">"&lt;total,"</span>+total+<span class="string">"&gt;."</span>;</span><br><span class="line">         context.write(<span class="keyword">new</span> Text(cur), <span class="keyword">new</span> Text(list));</span><br><span class="line">         <span class="comment">//下一个初始化</span></span><br><span class="line">         list = <span class="string">""</span>;</span><br><span class="line">         total = <span class="number">0</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         cur = (key.toString().split(<span class="string">" "</span>))[<span class="number">0</span>];</span><br><span class="line">         list += <span class="string">"&lt;"</span>+(key.toString().split(<span class="string">" "</span>))[<span class="number">1</span>]+<span class="string">","</span>+temp+<span class="string">"&gt;;"</span>;</span><br><span class="line">         total += temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</span><br><span class="line">        <span class="comment">//释放 只执行一次</span></span><br><span class="line"><span class="comment">//最后一个word</span></span><br><span class="line">        list += <span class="string">"&lt;total,"</span>+total+<span class="string">"&gt;."</span>;</span><br><span class="line">    context.write(<span class="keyword">new</span> Text(cur), <span class="keyword">new</span> Text(list));</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在main方法中，要注意设置的map和reduce的输出和前面写的一样，否则会报错，(╥╯^╰╥)</p><p>还要注意的是上一个输出对和下一个输入对类型要一致，否则会报错。</p><p>由此，实验二结束，✿✿ヽ(°▽°)ノ✿</p><p><img src="/uploads/hadoop_invertedindex.jpg" alt="实验结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;关于Hadoop的安装以及实验一可以参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/nb/6721627&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tiny_16 Hadoop学习&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面来看实验二：文档倒排索引算法实现&lt;br&gt;（debug的过程还是挺艰辛的）&lt;/p&gt;
&lt;p&gt;实验内容包括：（1）去除stop-words　（2）统计单词在每篇文档中出现的频率&lt;/p&gt;
&lt;p&gt;一开始的思路我是参考的&lt;a href=&quot;https://www.cnblogs.com/SeaSky0606/p/4820786.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hadoop之倒排索引&lt;/a&gt;，感觉挺好的，但是做到后面发现有问题。&lt;/p&gt;
&lt;p&gt;还是从头开始吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://yoursite.com/tags/study/"/>
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hello-world</title>
    <link href="http://yoursite.com/2018/05/12/Hello-world/"/>
    <id>http://yoursite.com/2018/05/12/Hello-world/</id>
    <published>2018-05-12T15:36:05.000Z</published>
    <updated>2018-05-13T14:14:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客终于搭好啦~撒花✿✿ヽ(°▽°)ノ✿</p><p>顺便记录一下</p><p>（1）<a href="https://www.cnblogs.com/chengxs/p/7430283.html" target="_blank" rel="noopener">主题</a></p><p>（2）搭建过程中还出现了错误：用hexo new命令创建了一篇文章，为什么主页没有显示？感谢wxu小姐姐。好像是因为_config.yml中timezone:写了不存在的时区的问题，还有md格式要写对。</p><p>emmmm，突然发现评论还没有加，(╯‵□′)╯︵┻━┻</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博客终于搭好啦~撒花✿✿ヽ(°▽°)ノ✿&lt;/p&gt;
&lt;p&gt;顺便记录一下&lt;/p&gt;
&lt;p&gt;（1）&lt;a href=&quot;https://www.cnblogs.com/chengxs/p/7430283.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;主题&lt;/
      
    
    </summary>
    
    
      <category term="7788" scheme="http://yoursite.com/tags/7788/"/>
    
  </entry>
  
</feed>
